/*H5基础标签*/
    【常用属性】
    <!DOCTYPE html> = 声明H5的标签
    <p>[内容]</p>标签的aling位置定位
        1)left；左默认
        2)right；右对齐
        3)center；居中
        4)justify；两端对齐

    /*列表*/
        [无序]
            <ul>
                <li></li>
                 <li></li>
            </ul>
            常用属性
                type 列表图标
                    square 实心正方
                    circle 空心圆
                    disc   实心圆
        [有序]
            <ol>
                <li></li>
            </ol>
            常用属性
                type 列表图标
                    1 数字
                    a 小写字母
                    A 大写字母
                    i 小写罗马
                    I 大写罗马

    /*块级标签*/
        div标签
            层,块级元素,标签自动换行
        span标签
            块,行内元素,不会自动换行
        img
            行内元素,不会自动换行
    
    /*格式化标签*/
        font
            字体大小,尺寸,颜色
        pre
            自动换行,按格式排列
        <b>(粗文本)
        <i>(倾斜)
        <u>(下划线)
        <del>(中划线)
        <sub>(下标)
        <sup>(上标)

    /*超链接标签*/
        <a></a>
            target='值';
                _blank
                //新页面打开
                _self
                //当前页面打开
                _parent
                //副窗口打开
                _top
                //顶级窗口打开

    /*图片*/
        img
            行内元素,不会自动换行
        常用属性
            src     地址
            title   鼠标悬停的文字
            alt     图片无法加载显示的文字

    /*表格*/
        [常规]
            table   表格
            th      标题栏
            tr      行
                常用标签
                    aling 水平对齐
                    valign 垂直对齐
            td      单元格
        [单元格合并]
            纵向合并    rowspan
            横向合并    colspan

    /*表单*/
        form
            常用属性
                action 提交的地址
                method 提交方式
                target 提交打开窗口的方式
                    _blank
                    //新页面打开
                    _self
                    //当前页面打开
                    _parent
                    //副窗口打开
                    _top
                    //顶级窗口打开

        input
            常用属性
                type 选择元素类型
                    1.text      文本框
                    2.password  密码框
                    3.radio     单选框
                        ·checked //默认中
                    4.checkbox  复选框
                        [常用的对象]
                        对象.checked
                        // 判断是否被选中返回布尔值
                    5.file      上传文件
                    6.hidden    隐藏表单
                    7.button    按钮
                    8.submit    提交按钮
                    9.reset     重置(写入的默认值不会)
                    10.date     日期框
                    11.placeholder  半透明提示文字
                name        被提交值的名字
                value       元素的值
                readonly    只读
                maxlengte   限制写入长度

        textarea
            //定义输入多行文本标签
            常用属性
                cols    可见宽度
                rows    可见行数

        label标签
            for属性
            //当for属性与元素的id一致，点击label标签会自动聚焦定义的id标签
        
        button标签
            //H5标签 双标签方便嵌套标签,type没有设置默认上传表单
                <button type='button'>普通按钮</button>
            常用属性
                1.button    按钮
                2.submit    提交按钮
                3.reset     重置(写入的默认值不会)
                4.size      最多显示
                5.disabled  禁用下拉框/禁用按钮(禁用属性)trut

        select标签
            //下拉菜单
            常用属性
                select      下拉框标签
                option      下拉框选项
                multiple    复选框(多选)
                option标签  提示信息
                    selected    默认选中项

    /*字符实体*/
        <       &lt;
        >       &gt;
        空格    &nbsp;
        版权    &copy;

    /*CSS选择器*/
        选择器1 > 选择器2 
            //只选择选择器2
        
        选择器1 + 选择器2 
            //兄弟相邻选择器  找离自己最近选中的选择器
            
        选择器1 ~ 选择器2 
            //普通兄弟选择器  选选着自己之后的

/*JavaScript基础语法*/
    /*基本属性*/
        onclick;点击触发
    
    /*数据类型*/
        数值        (Number)
        字符串      (String)
        布尔值      (Boolean)
        Undefined   (未定义)
        NULL        (空)
        对象        (Object)

    /*数据转换*/
        parseint();
        //转换整形
        parseFloat();
        //转换整形，可以识别第一个小数点

        tostring();
        //转换成字符串
        tofixed();
        //转换成字符串,可以识别小数点

        number();
        //强制转换成数值
        String();
        //强制转换成字符串

    /*数组*/
        length
            //获取数组长度或者设置数组长度

        for.....in
            //遍历打印数组
                for(var index in arr2){
                    console.log(index);
                    //下标
                     console.log(arr2[index]);
                }
        
        foreach
            //函数遍历数组
                arr2.foreach(function(element,index){
                     console.log(index);
                    //下标
                     console.log(element);
                })

        push        添加元素到最后面
        unshift     添加元素在最前面
        pop         删除最后一项
        shift       删除最前面一项
        reverse     数组翻转
        join        数组转成字符串
        indexof     数组元素引索
        slice       截取数组,原数组不变
        concat      数组合并

    /*函数*/

        /*内置对象*/
            String  
                charat(id)      返回指定位置处的字符串   
                indexof(Chr)    返回指定字符串的位置,从左往右,找不到返回-1
                substr(m,n)     返回从字符段m开始查询,n个字符,如果无n查到结束
                substring()     返回从字符段m开始查询,n结束,如果无n查到结束
                tolowercase()   将字符串全部转换成小写
                touppercase()   将字符串的字符全部转换成大写
                length()        字段长度,属性,不是方法,返回字符的长度
            
            Math
                math.random()   随机数
                math.ceil()     四舍五入向上取整
                math.floor()    四舍五入向下取整

        /*对象序列化和反序列化*/
            JSON.stringify()
                //序列化对象,将对象转换成字符串

            JSON.parse(jsonstr);
                //反序列化,将严格Json字符串转换成对象。
   
    /*DOM*/
        onload='被触发的函数';
            window.onload='网页加载完执行';
            //页面加载完自动触发
        onblur=被触发的函数';
            //元素失去焦点
        onfocus=被触发的函数';
            //获取元素焦点
        onclick=被触发的函数';
            //鼠标点击事件
        onchange=被触发的函数';
            //改变内容触发
        onmouseover=被触发的函数';
            //鼠标移动到元素上触发
        onmouseout=被触发的函数';
            //鼠标从元素上离开触发
        onkeyup=被触发的函数';
            //键盘抬起
        onkeydown=被触发的函数';
            //键盘按下 
            
            /*DOM0级事件获取元素对象*/
                var x = document.getElementById("id名")
                x.onclick = function (){
                    log('绑定鼠标点击事件')
                }

            /*DOM2级事件*/
                addEventListener()
                //绑定执行,可以为同一个属性同一个事件绑定多次
                    三个参数
                        参数1:事件名
                        参数2：处理事件的函数
                        参数3:事件冒泡或捕获(布尔值)
                    实例
                        x.addEventListener('click',function(){
                            函数内容
                        })

                removeEventListener()
                //移除按钮
                    三个参数
                        参数1:事件名
                        参数2：处理事件的函数
                        参数3:事件冒泡或捕获(布尔值)
                    实例
                        x.removeEventListener('click',function(){
                            函数内容
                        })

            /*获取元素节点*/
                getElementById()
                    //根据id获取dom对象,如果重复以第一个为准
                getElementsByTagName()
                    //获取标签
                getElementsByClassName()
                    //以name获取元素
                getElementsByName()
                    //根据name属性值获取dom对象组,用于多选取值
                    【常用属性】
                        对象.checked
                        // 判断多选是否被选中,返回布尔值

                javascript:void(0)
                    //伪协议,给a标签不执行跳转
                    实例
                        <a herf='javascript:void(0)'></a>

            /*创建与插入节点*/
                [创建]
                    createElement()
                        //创建一个新的节点,传入标签,返回元素对象
                    creareTextNode()
                        //创建一个文本节点,可以传入文本内容
                    innerHTML()
                        //也能达到创建文本节点的效果,直接添加
                    setAttribute(方法名,值) 
                        //方法添加指定的属性，并为其赋指定的值。
                [插入]
                    write()
                        //将任意字符插入到文档中
                    appendChild()
                        //向元素中添加新的子节点,必须传入节点
                    parentElement
                        //获取父元素
                    父元素.insertBefore(值,在那之前)
                        //指向已有的节点之前插入新节,

                [间接查找节点]
                    childNodes
                        //返回元素的第一个子节点的数组
                    childNodes
                        //返回子节点的所有元素数组
                        
                    firstChild【节点】
                    firstElementChild【元素】
                        //返回元素的第一个子节点

                    lastChild【节点】
                    lastElementChild【元素】
                        //返回元素的最后一个子节点

                    nextSibling
                        //返回原始的下一个兄弟节点
                    parentNode
                        //返回元素的父节点
                    previousSibling
                        //返回元素的上一个兄弟节点
                [删除节点]
                    父元素.removeChild()
                        //从元素删除子节点(需要父元素)
                    实例
                        var x = 得到要被删除的节点
                        var z =得到被删除节点的父元素
                        z.removeChild(x)

            /*获取表单*/
                ·document.表单名字
                ·document.document.getElementById('id');
                    //id获取
                ·document.document.forms['表单名字'];
                    //名字下标获取
                ·document.document.forms['0'];
                     //数字下标获取
                
            /*获取input*/
                document.getElementById('id')
                    //元素id获取
                myform.元素名字
                    //通过form名字查询
                document.getElementsByName(name属性)[引索]
                    //通过name获取
                document.getElementsByTagName('input')[引索]
                    //通过TagName获取

            /*获取单选选中按钮*/
                选中设定：checked = 'checked'或checked = ture 又或者 cjecked
                未选中就是没有checked值

            /*获取下拉框选项*/ 
                【方法一】
                selectedIndex
                    //获取当前下拉框选择的索引值
                
                流程：
                    1)获取下拉框对象
                    2)获取对象索引
                    3)获取选项中的value,如果没有value就获取文本

                【方法二】
                var ? = ?.options;
                    //获取全部内容
                var selevalue = 目标对象.value;
                    //获取当前选中的值
                全部下拉内容[2].selected = true;
                    //设置默认选择

            /*提交表单*/ 
                1)按钮用button
                    ·<button type="button" onclick="?">提交</button>
                    ·js进行判断成功用：获取表单.submit() 提交
                2)传递布尔值确定跳转
                    ·<input type="submit" onclick='return ?'/>
                    ·js进行判断,return返回布尔值确定跳转
                3)和2差不多就是换了一个点击方式
                    ·<input type="submit" onsubit='return ?'/>
                    ·js进行判断,return返回布尔值确定跳转
                
    /*BOM*/
        /*窗口*/
            alert("弹出内容")
                //弹出警告窗口
            prompt("输入框",'默认显示值');
                //输入框
            confirm("显示内容");
                //确认框,返回布尔值
            open("网站地址");
                //打开新的网页'_self'在当前打开
            close();
                //关闭当前窗口

        /*时间执行*/
            toTimeString()
                //将时间转换成字符串
            
            setimeout(function,times);
                //延迟执行函数,如果需要循环使用需要递归(自己调用自己)
                //没有var在函数里定义的是全局属性,有var是局部变量
                参数1:执行的函数
                参数2：延迟执行的时间(单位毫秒)
                实例
                    time_id = setTimeout(init, 1000);
            
            clearTimeout
                //用于结束定时函数,需要获取定时函数
                实例
                    clearTimeout(time_id);

            setInterval
                //按照指定时间一直执行
                //没有var在函数里定义的是全局属性,有var是局部变量
                实例
                     int = setInterval(执行函数,延迟时间)

            clearInterval
                //停止 setInterval 创建的时间函数
                实例
                    setInterval(int)
        
        /*URL历史记录*/
            history对象
                lesnth
                    //当前访问过url的数量
                back()
                    //加载列表前一个URL(返回上一个页面)
                forward()
                    //加载历史列表的下一个URL
                go(number|url)
                    //number 参数使用的是要访问的URL在History的url列表小奶狗对位置
                    //URL是要访问的地址，

            locattion对象
                //设置当前文档rul
                href
                    //返回当前页面的url[属性]
                reload()
                    //重新加载当前文档
                replace()
                    //用新的文档替换当前的文档
                
/*JQuery语法*/
    /*基础选择器*/
        id选择器            $('#id属性值')
        类选择器            $('.class属性值')
        元素选择器          $('标签名/元素名')
        通用选择器          $('*')
        组合选择器          $('选择器1,选择器2')
        
    /*层次选择器*/  
        后代选择器          $('#id div');选择id后面所有的div元素(所有级)
        子代选择器          $('#id>div');选择id后面指定的div元素(志找一级)
        相邻选择器          $('.class + img');选择class里的下一个img(只找下一级,找不到则不获取)
        同辈选择器          $('.class ~ img');选择class同级之后的img(选择元素下面的所有元素)
                
    /*表单选择器*/  
        获取所有表单元素:   $(':input');
        文本框选择器        $(':text');
        密码框选择器        $(':password')
        单选按钮选择器      $(':radio');
        多选按钮选择器      $(':checkbox');
        提交按钮选择器      $(':sunmit');
        图像按钮选择器      $(':image');
        重置按钮选择器      $(':reset');
        文件域选择器        $(':file');
        按钮选择器          $(':button');
    
    /*操作元素的属性*/
        /*属性分类*/
            固有元素：元素本身就有的元素(如class name id...)
            返回值是boolean值的属性：checked,selected,disabled
            自定义属性：自己定义的属性

        /*1.获取属性*/
            attr('属性名');
                //不可以返回布尔值
            prop('属性名')
                //可以返回布尔值
                //获取不了自定义属性 
            
        /*2.设置属性*/
            attr('属性名,'属性值')
            prop('属性名','属性值')
                //可以设置布尔值,无法操作自定义属性

        /*1.移除属性*/
            aremoveAttr('属性名')

    /*操作元素的样式*/
        attr('class')               获取元素样式名(获取class的名字)
        attr('class','样式名')      设置元素的样式(改成另一个预定设置的样式)
        addClass('样式名')          添加样式(添加预定设置的样式,覆盖以css定义为准)
        css()                       添加具体的样式(添加行内样式)
            ·设置单个   css('样式名','样式值');
            ·设置多个   css({"样式名":"样式值","样式名":"样式值"})
        removeClass(class)          删除样式
          
    /*操作元素的内容*/(包括获取)
        html('');       获取元素的内容,包含html标签(非表单元素)【常用】
        html('内容');   设置元素的内容,包含html标签(非表单元素)
        text('');       获取元素的纯文本内容,不识别html标签(非表单元素)
        text('内容');   设置元素的纯文本内容,不识别html标签(非表单元素)
        val('');        获取元素的值(表单元素)获取表单的值value【常用】
        val('值');      设置元素的值(表单元素)

        [表单元素]
            文：text,密：password，单：radio，复：checkbox，隐：hidden，域：rexrarea，下拉框select
        [非表单元素]
            div，span，h1~h6等等这些不能传值的

    /*创建元素(标签)||添加元素(标签)*/
        [创建元素(标签)]
            $('内容') 例：$("<p>我是p标签</p>")

        [添加元素(标签)]
            1、前追加子元素(标签)
                指定元素.prepend(内容);         在指定元素内部的最前面追加内容,内容可以是字符串,html元素或jq对象
                $(内容).prependTo(指定元素);    把内容追加到指定子元素的最前面
            
            2、后追加子元素(标签)
                指定元素.append(内容);          指定元素内部后面追加内容
                $(内容).apppendTo(指定元素);    把内容追加到指定子元素的最 后面
            
            3、前追加同级元素(标签)
                before()  
                                                在指定元素的前面追加内容
            4、前追加同级元素(标签)
                after()                         在指定元素的后面追加内容

            注：
                在添加元素时，如果元素本身不存在(新建元素),此时会将元素追加到指定位置
                如果元素本身存在(已有元素),会将原来元素直接剪切到新的位置

    /*删除元素*/
        remove()
            删除元素及其对应的子元素,标签和内容一起删除
            指定元素.remove()
        empty()
            清空元素内容,但保留标签

    /*遍历元素*/
        each()
            目标元素.each(function(index,element){
                //index     遍历元素序列号
                //element   遍历对应的dom元素
                //$(this)   转换成jq对象   
            })

    /*ready加载事件*/
        ready加载事件
            当页面的dom结构加载完成后运行
            可以存在多个,执行顺序从上往下
            语法：
                $(document).ready(function(){
                    执行体
                })
            简写语法：
                $(function(){
                     执行体
                })

    /*bind绑定事件*/
        /*单个绑定*/
            1·bind绑定
               目标元素.bind("触发方式",function(){
                   //执行的函数体
               })

            2·直接绑定法【常用】
                目标元素.触发方式(function(){
                    //执行的函数体
                })        
        /*多个绑定*/
            1·bind绑定
                //为多个事件绑定同一个函数
                    指定元素.bind("事件类型1 事件类型2..."function(){
                        //执行函数体
                    }) 
                //为元素绑定多个事件
                    指定元素.bind("事件类型1 事件类型2..."function(){
                        //执行函数体
                    }).bind("事件类型1 事件类型2..."function(){
                        //执行函数体
                    }) 
                //为多个元素绑定多个事件并,绑定函数
                    指定元素.bind({
                        "事件类型"：function(){
                            //执行函数体
                        },
                    })
            2·直接绑定【常用】
                指定元素.事件名(function(){
                    //执行函数体
                }).事件名(function(){
                    //执行函数体
                })
    
    /*JQuery Ajax*/
        简介：Ajax是异步无刷新数据技术
        JQuery调用Ajax
            1、$.Ajax()
            语法：
                $.Ajax({
                    type:请求的方式GET/POST
                    url:请求地址
                    asyn:是否异步,默认true
                    adta:发送到服务器的数据
                    dateType:预期服务器返回的数据
                    contentType:设置请求头
                    success:请求成功时调用的函数
                    error:请求失败调用的函数
                })
            2、$.get()
                语法:
                    $.get("请求的地址",{请求的参数},function(data){
                        执行返回的函数
                    })
            3、$.POST()
                语法:
                    $.post("请求的地址",{请求的参数},function(data){
                        执行返回的函数
                    })
            4、$.getJSON()
                //返回的数据是JSON格式,如果数据不是JSON格式的无法获取
                语法:
                    $.getJSON("请求的地址",{请求的参数},function(data){
                        执行返回的函数
                    })

                注:
                    php echo 返回值给ajax时，需要注意事项
                        1、echo 111;（可行，输出为数字）
                        2、echo ‘111’;（不可行，不能输出字符串）;
                        3、echo json_encode($_POST);（可行，输出json）

    /*前端框架BootStrap*/
        /*布局容器*/
            1、有留白容器
                <div class="container">
                    //内容
                </div>
            2、占满浏览器窗口
                <div class="container">
                    //内容
                </div>
            注：两个不能互相嵌套，并且这两个是响应式布局
            93集   233
        
        
        
        
        
        
        