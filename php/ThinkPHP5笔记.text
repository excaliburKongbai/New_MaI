/****************************基础介绍*****************************/
1、目录结构
|-application  应用目录 是整个网站的核心
|---|---index  前台目录
|---|---|---controller  控制器
|---|---|---model 数据模型
|---|---|---view  页面
|---|---admin  后台目录
|-extend  扩展类库目录
|-public  静态资源和入口文件
|---|---sratic  存放静态资源
|---|---index.php  入口文件
|-runtime  网站运行临时文件
|-tests  测试目录
|-thinkphp  tp框架的核心文件
|---|---lang  语言包
|---|---library tp框架的核心文件
|---|---tpl  模板页面
|-vendor  第三方扩展目录

2、url地址解析
    http://thinkphp5/public/ index.php  /Index  /Index  /index
    域名                      入口文件    前台    控制器   方法

3、了解tp开发模式
    0、开启调试模式，错误不会隐藏 config\app.php
    // 应用调试模式
    'app_debug'     => true,false改成true

    
    1、连接数据库 config\datebase.php
    //设置连接数据库属性

    2、控制器 application\index\controller\Index.php

    3、页面 application\index\view\index\index.html

    4、模型 application\index\model

4、MVC模式介绍
    view            视图
        //从控制器获取数据显示给用户的
    Controller      控制器
        //控制模型调用的
    model           模型
        //运行获取数据数据返回给控制器

/****************************基础介绍END*****************************/

/****************************TP5.0概述*****************************/
/*基础结构*/
    1、控制器 application\index\controller\
        1、新建的控制器首字母大写
        2、控制器必须声明命名空间
            //例：namespace app\idnex\controller;
        3、控制器中类名和文件名一致


    2、模块(后台) application\index
        1、在admin目录下新建 model,view和controller

        2、创建操作(前台)
            //在Index文件里创建一个User的方法

    3、模型 application\index\model
        1、负责数据库相关的处理

    4、视图
        1、网站页面

    5、命名空间
        1、与目录有关

/*系统类和系统方法*/
    /*系统类*/(需要继承)地址(thibkphp\library\think)
        Config
        Controller      系统控制器
        Env             读取环境变量
        Route           路由
        url             地址生成
        view            视图渲染
        request         请求类

    /*系统方法*/地址(thibkphp\helper.php)
        dump();         格式化输出
        controller();   调用控制器
        action();       调试方法
        config();       读取和设置配置文件
        url();          生成url地址
        view();         加载页面
        request();      实例化请求类

/*跨控制器调用*/
    1、跨控制器
        1、用命名空间实例化其他控制器调用
            $model = new app\index\controller\User
            echo $model->index();

        2、用use引入  use app\index\controller\User
            $model = new User
            echo $model->index();

        3、系统方法
            $model = controller('User');
            echo $model->index();

        4、调用后台模块
            //如果命名空间重名需要as取别名
            $model = controller('admin/User');
            echo $model->index();

    2、当前控制器调用
        1、面向对象控制器
            1、$this->test();

            2、self::tesr();

            3、Index::test();
                //当前类

    3、系统方法调用
        2、系统方法调用当前
            echo action('sest')
            
        3、系统函数调用后台模块的Index方法
            echo action('admin/Index/index');

/*分析TP执行流程*/

/*TP环境配置*/
    //配置环境都用数组
    1、修改配置
        1、惯例配置
            a、路径(php\ThinkPHP5\thinkphp\convention.php)
            B、一般来说不要去改

        2、应用配置
             a、路径(php\ThinkPHP5\config\app.php)(5.1)
             b、路径(php\thinkphp5.0\application\config.php)(5.0)

        3、扩展配置(tp5.1 移除)
            a、其实就是对配置文件进行分目录管理

            b、系统定义路径(php\ThinkPHP5\config\database.php)

            c、自定义配置路径(php\thinkphp5.0\application\extra下)
        4、场景配置(tp5.1 移除)
            a、开发可能在不同环境下开发

            b、在配置文件中修改app_status => '???'来更改其他环境设置

            c、在application下写其他配置文件

        5、模块配置
            a、每个模块都有自己的配置

            b、目录(php\thinkphp5.0\application\index)

            c、dump(config('name'));读取前台配置

        6、动态配置
            config('配置名','配置属性')

    2、读取配置
        //通过系统函数读取配置
            echo config('name.');
            echo "<hr>";
        //通过系统类读取配置 || .xxxx相当于xxx['xxx']数组下标
            echo \think\facade\Config::get("name.");
        //打印不存在的值为空

        //读取database扩展配置
        dump(config('database.'));
    
    3、系统类(php\thinkphp5.0\thinkphp\library\think)
        a、Config 设置和获取配置文件

    4、系统方法(php\thinkphp5.0\thinkphp\helper.php)
        ·Controller         实例化控制
        ·action             调用模块的操作方法
        ·config             设置和获取配置
        ·dump               打印和var_dump一样

    5、配置文件之间的加载顺序(优先度)
        动态配置>模块配>场景配置>扩展配置>应用配置>惯例配置

    6、环境变量配置
        a、新建一个.env文件

        b、书写环境配置
            //产考env文件
        
        c、打印环境文件
            public function getEnv(){
                系统类
                dump(\think\Env::get('name'));
                //1参数是名字 2参是不存在返回的值默认NULL
                
                dump(\think\Env::get('database.type'));
                //读取数组 只能单个属性读写
                //不能写中文
            }
        
        e、如何使用
            1、可以设置调试模式等
                例:app_debug=false

            2、在配置文件里设置
                use \think\Env
                xxxx =>Env::get('xxx)            

/*路由*/
    /*1、路由的作用*/
        1、简化URL地址,方便记忆

        2、防止爬虫,优化搜索引擎

    /*2、入口文件*/

        1、前后台分离
            a、在网站public目录下新建admin.php入口文件

        2、绑定模块
            实现功能
                //在定义目录后,引入框架钱
                a、index只能去前台
                    例:define('BIND_MODULE','index');
                
                b、admin只能去后台
                    例:define('BIND_MODULE','admin');

        3、隐藏入口文件(apache修改)
            a、开启write重写

            b、allowOverride 改成all

            c、入口文件,在网站public下新建.htaccess文件
                设置隐藏前台(index.php和禁止进入后台)
                    <IfModule mod_rewrite.c>
                        Options +FollowSymlinks -Multiviews
                        RewriteEngine on
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]
                    </IfModule>

    /*3、路由学习*/
        //注意事项
            1、支持三种方式的URL解析规则
            2、路由只针对应用,不针对模块，因此路由的设置也是针对应用下的所有模块
            3、后台一般不需要路由,需要关闭,在后台的入口文件,必须写在引导和加载文件只后
                //关闭admin模块路由
                \think\app::route(false);
        1、/*路由模式设置*/
            【普通模式】   
                a、关闭路由,完全使用默认形式访问

                b、关闭路由
                    // 是否开启路由
                    'url_route_on'=> false,

                c、关闭强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> false,

            【混合模式】
                 a、开启路由
                    // 是否开启路由
                    'url_route_on'=> true,

                b、关闭强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> false,

            【强制模式】
                a、开启路由
                   // 是否开启路由
                    'url_route_on'=> true,

                b、开启强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> true,

        2、/*设置路由*/
            //参数设置Route::rule('路由表达式','路由地址','请求类型','路由参数(数组)','变量规则(数组)')
            1、/*动态单个注册*/

                1、如何设置路由
                    a、在(application\route.php)里设置路由

                    b、use引入系统类
                        use \think\Route;

                    c、设置路由
                        Route::rule('/','index/index/index');
                        Route::rule('getEnv','index/index/getEnv');
                
                2、路由的表达式
                    1、静态地址路由
                        //注册路由getEnv 访问直到模块的getEnv方法
                            Route::rule('getEnv','index/index/getEnv');

                    2、带参数的路由
                        //单个值传入  xxx/sourse/被传入的值
                        Route::rule('sourse/:id','index/index/sourse');

                        //输出 传入的id        //打印全部传入的值
                        echo input('id');     dump(input());

                        //多个值传入 []里设置的参数为可选传入
                        Route::rule('sourses/:id/[:age]','index/index/sourses');
                        
                    3、动态路由(慎用容易bug)
                        //Route::rule(':a/:b','index/index/dongtai');

                    4、完全匹配路由
                        //在test1加了$后,在末尾写任何东西也不会执行test1
                        Route::rule('test1$','index/index/test1');

                    5、路由额为的携带参数
                        Route::rule('test2','index/index/test2?id =114514& name =Excalibur');

                        //打印全部传入的值
                        dump(input());

                3、路由请求类型
                    1、TP的请求四种类型  
                        get、post、put、delete

                    2、Route::rule()  默认支持所有请求方式

                    3、设置提交方式get和post都可以
                        Route::rule('type','index/index/type','get');
                        //或
                        Route::get('type','index/index/type');

                    4、同时指出get和post
                        Route::rule('type','index/index/type','get|post');

                    5、支持所有提交方式
                        Route::rule('type','index/index/type','*');
                        //或者
                        Route::any()

                    6、put和delete请求
                        【前置条件：一点要有get请求才可以进行模拟请求】
                        //模拟put请求
                            Route::rule('type','index/index/type','put');
                            //或
                            Route::put('type','index/index/type');
                        //模拟delete请求
                            Route::rule('type','index/index/type','delete');
                            //或
                            Route::delete('type','index/index/type');

            2、/*动态批量注册*/
                【基本格式】
                    Route::rule([
                        '路由规则1'=>'路由地址和参数',
                        '路由规则2'=>['路由地址和参数','匹配参数(数组)','变量规则(数组)']
                        ...
                    ],'','请求类型','匹配参数(数组)','变量规则');
                
                1、使用
                    Route::rule([
                        "hello"=>'index/index/hello',
                        "course/:id"=>"index/index/course",
                    ],'','get');

                2、单一请求方式
                    Route::get([])

            3、/*配置文件批量注册*/
                //数组方式批量声明
                return [
                    "hello"=>'index/index/hello',
                    "sourse/:id"=>"index/index/sourse",
                ];

            4、/*变量规则*/
                【用来设置传入变量的一些规则】
                例:Route::rule('test2/:id','index/index/test2','get',[],['id'=>'\d{1,3}']);
                /w+     :只会匹配字母和下划线
                /d+     :只会匹配数字
                {a,b}   :限制输入数量a起始,b最大位数

            5、/*路由参数*/
                method	            请求类型检测，支持多个请求类型	method
                ext	                URL后缀检测，支持匹配多个后缀	ext
                deny_ext	        URL禁止后缀检测，支持匹配多个后缀	denyExt
                https	            检测是否https请求	https
                domain	            域名检测	domain
                before	            前置行为（检测）	before
                after	            后置行为（执行）	after
                merge_extra_vars	合并额外参数	mergeExtraVars
                complete_match	    是否完整匹配路由	completeMatch
                model	            绑定模型	model
                cache	            请求缓存	cache
                param_depr	        路由参数分隔符	depr
                ajax	            Ajax检测	ajax
                pjax	            Pjax检测	pjax
                response	        绑定response_send行为	response
                validate	        绑定验证器类进行数据验证	validate
                header	            设置Response的header信息	header
                append	            追加额外的参数（5.1.5+）	append
                middleware	        注册路由中间件（5.1.6+）	middleware
                merge_rule_regex	合并路由规则（V5.1.6+）	mergeRuleRegex
                filter	            请求变量过滤（V5.1.16+）	filter

            6、/*资源路由*/
                1、后台功能
                    add页面、展示页面、删除功能、修改页面、修改功能、新增功能
                    //声明路由
                        Route::resource('blog','Index/Blog');

                2、自动注册七个路由规则
                    get     blog            idnex   #后台展示
                    get     blog/create     create  #添加页面
                    post    blog            save    #增加操作
                    get     blog/:id        read
                    get     blog/:id/edit   edit    #修改页面操作
                    put     blog/:id        updata  #更新操作
                    delete  blog/:id        delete  #删除操作

            7、/*快捷路由*/
                    1、声明快捷路由
                        Route::controller('blog','Index/Blog');

                    2、运用url
                        url:xxx/blog/xxx 会自动查找blog下面getxxx的方法
                        例：查找a
                            public function geta(){
                                echo 'aaa';
                             }

            8、/*url生成地址*/
                1、use 引入
                    use think\Url;
                2、方法
                    #系统类
                     dump(url::build('index/index/index'));
                     #系统方法
                     dump(url('index/index/index'));

                     #url带参数
                      dump(url::build('index/index/index/id/10'));
                    //或
                     dump(url('index/index/index','['id'=>10,'name'=>'ZhangSan']'));

                    #带域名和锚点
                        1、dump(url('index/index/index#naem','['id'=>10,'name'=>'ZhangSan']'));
                        2、dump(url('index/index/index@blog','['id'=>10,'name'=>'ZhangSan']'));

/*控制器*/
    1、/*新建控制器*/
        控制器 application\index\controller\
        1、新建的控制器首字母大写
        2、控制器必须声明命名空间
            //例：namespace app\idnex\controller;
        3、控制器中类名和文件名一致
        4、如果控制器是驼峰命名法,在url里输入要转换成_
            例：IndexName ==index_name

    2、/*控制器加载页面*
        1、系统view类
            $view = new \think\view;
            return  $view->fetch();

        2、系统Controller类
            引入Controller类
            return $this->display();

        3、系统方法
            return view();

    3、/*数据输出*/
        1、输出数组
            return json_encode($arr);
            //转换成json格式返回

        2、return默认返回是html格式看样子config里改
            return "<h3>233</h3>"

        3、ajax请求的数据返回设置(在config)
            // 默认AJAX 数据返回格式,可选json xml ...
            'default_ajax_return'  => 'json',

    4、/*控制器的初始化 */
        //只要调动任意控制器的任意方法,都会优先执行初始化方法
        1、需要引入Controller 并且类需要继承Controller
            例:public function _initialize(){
                    echo '我是一个初始化的方法';
                }
        
        3、控制器的初始化方法的使用
            1、可以用来提取公共的代码
            2、后台权限的把控

    5、/*前置操作*/
        //把一些公共设置提取出方法调用
        //需要引入并且继承Controller
        例:
            protected $beforeActionList =[
                'two'=>['except'=>'index'],
                //除了index都可以调用
                'one'=>['only'=>'index'],
                //只让index调用的同时,调用one
            ];

    6、/*页面跳转*/
        //需要引入并且继承Controller
        格式：$this->success(提示信息,跳转地址,用户自定义数据,跳转页面,header信息)

        1、跳转成功
            $this->success()
        2、跳转失败
            $this->error()

        3、修改登录成功/失败模板页面
            //默认跳转页面对应的模板路径(php\thinkphp5.0\thinkphp\tpl\dispatch_jump)
                ·成功
                    dispatch_success_tmpl
                ·失败
                    dispatch_error_tmpl
            
            //返回的数据
                $code => 返回状态码 1成功 0失败
                $data => 要返回的数据
                $msg  => 页面提示信息
                $wait => 跳转等待时间 单位秒
                $url  => 跳转页面地址 默认返回上一个页面

            1、在原模板里修改
                地址(thinkphp\tpl\dispatch_jump.tpl)里进行修改
            
            2、新建模板
                地址(thinkphp\tpl\)下新建
                在coofig里修改指向新创建的模板
                    // 默认跳转页面对应的模板文件
                    'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
                    'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
            
    7、/*重定向*/
        作用:重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其它位置

        1、使用
            redirect('跳转地址','其他参数',code,'隐藏参数');

            引入系统变量Controller
            $this-> redirect('index/index',['id'=>'zhangsan'],$code = 302 [默认302],'隐藏参数');

            code
                301 永久转移
                302 临时转移

        使用例:
                public function cdx(){
                    $this->redirect('index/index',['id'=>'zhangsan']);
                }

    8、/*空控制权和空操作*/
        1、空操作
            作用:用于防止用户乱输入导致网页报错
                public function _empty(){
                    $this->redirect('index/index');
                    //检测到不存在的方法重定向回首页
                }
        2、空控制权
            1、在index的controller下新建一个Error.php用与重定向

            2、实例
                class Error extends Controller{
                    //空控制器
                    public function index(){
                        $this->redirect('index/index');
                        //重新定向回首页
                    }

                    //空操作
                    public function _empty(){
                        $this->redirect('index/index');
                    }
                }
            3.注意
                1、网站上线的时候每一个控制器都必须添加空操作

                2、不论前台后台都需要一个空控制权

                3、用来防止恶意输入

    9、/*使用命令行创建*/
        1、切换到网站根目录下

        2、输入php think 查看命令行

        3、使用
            1、创建资源控制器
                php think make:controller app\index\controller\Goods
            
            2、创建数据模型
                php think make:model app\index\model\Goods

            3、清空临时文件
                php think clear

    10、/*资源控制权*/
        1、使用命令行创建资源控制器
            php think make:controller app\index\controller\Goods
        
        2、资源控制器一般配合资源路由使用

/*请求和响应*/
    1、/*如何获取请求*/
        1、系统函数
            $request = request();

        2、系统Request类
            use think\Request;
            //因为Request类属性类的单例,不能new
            $request=Request::instance();
        
        3、系统Controller
            use think\Request;
            use think\Controller;

            public function qinqiu(Request $request){
                dump($request);
            }

    2、/*获取用户的请求信息*/
        //前置例:
                public function qinqiu(Request $request){
                    //内容体
                }

        1、获取用户当前域名
            dump($request->domain());

        2、获取url除了域名以外(携带参数)
            dump($request->url());

        3、获取入口文件
            dump($request->baseFile());

        4、获取PathInfo路径
            dump($request->PathInfo());

        5、获取PathInfo路径不带后缀
            dump($request->Path());

        6、获取url后缀
            dump($request->ext());

        7、伪静态
            就是将静态路径伪装成静态页面,让搜索引擎更好的收录网站和不然其他人知道网站的真实情况

    3、/*获取请求模块\控制权\方法*/
        1、控制器
            dump($request->controller());
           
        2、方法
            dump($request->action());

        3、模块    
             dump($request->module());
             
    4、/*获取请求参数*/
        //获取请求类型
            dump($request->method());
        //请求的资源类型
            dump($request->type());
        //访问的地址
            dump($request->ip());
        //是否是ajax请求
            dump($request->isAjax());



/****************************TP5.0概述END*****************************/


/****************************TP5.1概述*****************************/
/*TP5.1环境变量*/
    //官方提供了一个类库Env来获取环境变量 需要引入Env
        例return Env::get('app_path')
    ·应用根目录          root_path
    ·应用目录            app_path
    ·框架目录            think_path
    ·配置目录            config_path
    ·扩展目录            extend_path
    ·composer目录        vendor_path
    ·运行缓存目录        runtime_path
    ·路由目录            route_path
    ·当前模块目录        module_path

/*控制器定义*/
    1、控制器的大小写会被转换,用_替代大小
        例如:HelloWorld转换成Hello_world

    2、return输出数组可以用json输出
        例如:return json($数组变量);

    3、输出模板
        例如：view('路径');

    4、定义初始化方方法:initialize()

        a、initialize()会在调用控制器方法前执行
            例：protected(受保护也可以) function initialize(){
                parent::initialize();
                echo'xxx';
                //初始化输出内容
            }

        b、initialize()方法不需要任何返回值,输出用php方式,return无效

/*控制器操作*/
    1、前置操作 $beforeActionlist
        //有选着性的的进行初始化操作
        a、需要继承 extends Controller

        b、例如：
            protected $beforeActionlist= [
                'first',
                //默认全部执行
                'second'=>['except'=>'one'],
                //one不能运行这个初始化方法 可以用xx,xx选着多个方法
                'only'=>['only'=>'one'],
                //只能用这个运行前置方法
            ]

            protected function first(){
                echo xxxx;
                执行体;
            }

    2、跳转和重定向
        //Controller提供了两个跳转方法
            1、success(msg,url)
                //成功转挑到url
            2、error(msg)
                //失败返回上一层
            例：
            protected $flag = false;
                //设置默认值
            public function index(){
                if($this->flag){
                    $this->success(msg:'成功',url'../');
                }else{
                    $this->error(msg:'失败');
                }
            }
        //跳转的模板
            a、地址(php\ThinkPHP5.1\thinkphp\tpl\dispatch_jump.tpl)

            b、可以在app.php里更改模板

    3、空方法和空控制器
/****************************TP5.1概述END*****************************/
