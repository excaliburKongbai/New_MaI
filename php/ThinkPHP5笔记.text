/****************************基础介绍*****************************/
1、目录结构
|-application  应用目录 是整个网站的核心
|---|---index  前台目录
|---|---|---controller  控制器
|---|---|---model 数据模型
|---|---|---view  页面
|---|---admin  后台目录
|-extend  扩展类库目录
|-public  静态资源和入口文件
|---|---sratic  存放静态资源
|---|---index.php  入口文件
|-runtime  网站运行临时文件
|-tests  测试目录
|-thinkphp  tp框架的核心文件
|---|---lang  语言包
|---|---library tp框架的核心文件
|---|---tpl  模板页面
|-vendor  第三方扩展目录

2、url地址解析
    http://thinkphp5/public/ index.php  /Index  /Index  /index
    域名                      入口文件    前台    控制器   方法

3、了解tp开发模式
    0、开启调试模式，错误不会隐藏 config\app.php
    // 应用调试模式
    'app_debug'     => true,false改成true

    
    1、连接数据库 config\datebase.php
    //设置连接数据库属性

    2、控制器 application\index\controller\Index.php

    3、页面 application\index\view\index\index.html

    4、模型 application\index\model

4、MVC模式介绍
    view            视图
        //从控制器获取数据显示给用户的
    Controller      控制器
        //控制模型调用的
    model           模型
        //运行获取数据数据返回给控制器

/****************************基础介绍END*****************************/

/****************************TP5.0概述*****************************/
/*基础结构*/
    1、控制器 application\index\controller\
        1、新建的控制器首字母大写
        2、控制器必须声明命名空间
            //例：namespace app\idnex\controller;
        3、控制器中类名和文件名一致


    2、模块(后台) application\index
        1、在admin目录下新建 model,view和controller

        2、创建操作(前台)
            //在Index文件里创建一个User的方法

    3、模型 application\index\model
        1、负责数据库相关的处理

    4、视图
        1、网站页面

    5、命名空间
        1、与目录有关

/*系统类和系统方法*/
    /*系统类*/(需要继承)地址(thibkphp\library\think)
        Config
        Controller      系统控制器
        Env             读取环境变量
        Route           路由
        url             地址生成
        view            视图渲染
        request         请求类

    /*系统方法*/地址(thibkphp\helper.php)
        dump();         格式化输出
        controller();   调用控制器
        action();       调试方法
        config();       读取和设置配置文件
        url();          生成url地址
        view();         加载页面
        request();      实例化请求类

/*跨控制器调用*/
    1、跨控制器
        1、用命名空间实例化其他控制器调用
            $model = new app\index\controller\User
            echo $model->index();

        2、用use引入  use app\index\controller\User
            $model = new User
            echo $model->index();

        3、系统方法
            $model = controller('User');
            echo $model->index();

        4、调用后台模块
            //如果命名空间重名需要as取别名
            $model = controller('admin/User');
            echo $model->index();

    2、当前控制器调用
        1、面向对象控制器
            1、$this->test();

            2、self::tesr();

            3、Index::test();
                //当前类

    3、系统方法调用
        2、系统方法调用当前
            echo action('sest')
            
        3、系统函数调用后台模块的Index方法
            echo action('admin/Index/index');

/*分析TP执行流程*/

/*TP环境配置*/
    //配置环境都用数组
    1、修改配置
        1、惯例配置
            a、路径(php\ThinkPHP5\thinkphp\convention.php)
            B、一般来说不要去改

        2、应用配置
             a、路径(php\ThinkPHP5\config\app.php)(5.1)
             b、路径(php\thinkphp5.0\application\config.php)(5.0)

        3、扩展配置(tp5.1 移除)
            a、其实就是对配置文件进行分目录管理

            b、系统定义路径(php\ThinkPHP5\config\database.php)

            c、自定义配置路径(php\thinkphp5.0\application\extra下)
        4、场景配置(tp5.1 移除)
            a、开发可能在不同环境下开发

            b、在配置文件中修改app_status => '???'来更改其他环境设置

            c、在application下写其他配置文件

        5、模块配置
            a、每个模块都有自己的配置

            b、目录(php\thinkphp5.0\application\index)

            c、dump(config('name'));读取前台配置

        6、动态配置
            config('配置名','配置属性')

    2、读取配置
        //通过系统函数读取配置
            echo config('name.');
            echo "<hr>";
        //通过系统类读取配置 || .xxxx相当于xxx['xxx']数组下标
            echo \think\facade\Config::get("name.");
        //打印不存在的值为空

        //读取database扩展配置
        dump(config('database.'));
    
    3、系统类(php\thinkphp5.0\thinkphp\library\think)
        a、Config 设置和获取配置文件

    4、系统方法(php\thinkphp5.0\thinkphp\helper.php)
        ·Controller         实例化控制
        ·action             调用模块的操作方法
        ·config             设置和获取配置
        ·dump               打印和var_dump一样

    5、配置文件之间的加载顺序(优先度)
        动态配置>模块配>场景配置>扩展配置>应用配置>惯例配置

    6、环境变量配置
        a、新建一个.env文件

        b、书写环境配置
            //产考env文件
        
        c、打印环境文件
            public function getEnv(){
                系统类
                dump(\think\Env::get('name'));
                //1参数是名字 2参是不存在返回的值默认NULL
                
                dump(\think\Env::get('database.type'));
                //读取数组 只能单个属性读写
                //不能写中文
            }
        
        e、如何使用
            1、可以设置调试模式等
                例:app_debug=false

            2、在配置文件里设置
                use \think\Env
                xxxx =>Env::get('xxx)            

/*路由*/
    /*1、路由的作用*/
        1、简化URL地址,方便记忆

        2、防止爬虫,优化搜索引擎

    /*2、入口文件*/

        1、前后台分离
            a、在网站public目录下新建admin.php入口文件

        2、绑定模块
            实现功能
                //在定义目录后,引入框架钱
                a、index只能去前台
                    例:define('BIND_MODULE','index');
                
                b、admin只能去后台
                    例:define('BIND_MODULE','admin');

        3、隐藏入口文件(apache修改)
            a、开启write重写

            b、allowOverride 改成all

            c、入口文件,在网站public下新建.htaccess文件
                设置隐藏前台(index.php和禁止进入后台)
                    <IfModule mod_rewrite.c>
                        Options +FollowSymlinks -Multiviews
                        RewriteEngine on
                        RewriteCond %{REQUEST_FILENAME} !-d
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]
                    </IfModule>

    /*3、路由学习*/
        //注意事项
            1、支持三种方式的URL解析规则
            2、路由只针对应用,不针对模块，因此路由的设置也是针对应用下的所有模块
            3、后台一般不需要路由,需要关闭,在后台的入口文件,必须写在引导和加载文件只后
                //关闭admin模块路由
                \think\app::route(false);
        1、/*路由模式设置*/
            【普通模式】   
                a、关闭路由,完全使用默认形式访问

                b、关闭路由
                    // 是否开启路由
                    'url_route_on'=> false,

                c、关闭强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> false,

            【混合模式】
                 a、开启路由
                    // 是否开启路由
                    'url_route_on'=> true,

                b、关闭强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> false,

            【强制模式】
                a、开启路由
                   // 是否开启路由
                    'url_route_on'=> true,

                b、开启强制使用路由
                    // 是否强制使用路由
                    'url_route_must'=> true,

        2、/*设置路由*/
            //参数设置Route::rule('路由表达式','路由地址','请求类型','路由参数(数组)','变量规则(数组)')
            1、/*动态单个注册*/

                1、如何设置路由
                    a、在(application\route.php)里设置路由

                    b、use引入系统类
                        use \think\Route;

                    c、设置路由
                        Route::rule('/','index/index/index');
                        Route::rule('getEnv','index/index/getEnv');
                
                2、路由的表达式
                    1、静态地址路由
                        //注册路由getEnv 访问直到模块的getEnv方法
                            Route::rule('getEnv','index/index/getEnv');

                    2、带参数的路由
                        //单个值传入  xxx/sourse/被传入的值
                        Route::rule('sourse/:id','index/index/sourse');

                        //输出 传入的id        //打印全部传入的值
                        echo input('id');     dump(input());

                        //多个值传入 []里设置的参数为可选传入
                        Route::rule('sourses/:id/[:age]','index/index/sourses');
                        
                    3、动态路由(慎用容易bug)
                        //Route::rule(':a/:b','index/index/dongtai');

                    4、完全匹配路由
                        //在test1加了$后,在末尾写任何东西也不会执行test1
                        Route::rule('test1$','index/index/test1');

                    5、路由额为的携带参数
                        Route::rule('test2','index/index/test2?id =114514& name =Excalibur');

                        //打印全部传入的值
                        dump(input());

                3、路由请求类型
                    1、TP的请求四种类型  
                        get、post、put、delete

                    2、Route::rule()  默认支持所有请求方式

                    3、设置提交方式get和post都可以
                        Route::rule('type','index/index/type','get');
                        //或
                        Route::get('type','index/index/type');

                    4、同时指出get和post
                        Route::rule('type','index/index/type','get|post');

                    5、支持所有提交方式
                        Route::rule('type','index/index/type','*');
                        //或者
                        Route::any()

                    6、put和delete请求
                        【前置条件：一点要有get请求才可以进行模拟请求】
                        //模拟put请求
                            Route::rule('type','index/index/type','put');
                            //或
                            Route::put('type','index/index/type');
                        //模拟delete请求
                            Route::rule('type','index/index/type','delete');
                            //或
                            Route::delete('type','index/index/type');

            2、/*动态批量注册*/
                【基本格式】
                    Route::rule([
                        '路由规则1'=>'路由地址和参数',
                        '路由规则2'=>['路由地址和参数','匹配参数(数组)','变量规则(数组)']
                        ...
                    ],'','请求类型','匹配参数(数组)','变量规则');
                
                1、使用
                    Route::rule([
                        "hello"=>'index/index/hello',
                        "course/:id"=>"index/index/course",
                    ],'','get');

                2、单一请求方式
                    Route::get([])

            3、/*配置文件批量注册*/
                //数组方式批量声明
                return [
                    "hello"=>'index/index/hello',
                    "sourse/:id"=>"index/index/sourse",
                ];

            4、/*变量规则*/
                【用来设置传入变量的一些规则】
                例:Route::rule('test2/:id','index/index/test2','get',[],['id'=>'\d{1,3}']);
                /w+     :只会匹配字母和下划线
                /d+     :只会匹配数字
                {a,b}   :限制输入数量a起始,b最大位数

            5、/*路由参数*/
                method	            请求类型检测，支持多个请求类型	method
                ext	                URL后缀检测，支持匹配多个后缀	ext
                deny_ext	        URL禁止后缀检测，支持匹配多个后缀	denyExt
                https	            检测是否https请求	https
                domain	            域名检测	domain
                before	            前置行为（检测）	before
                after	            后置行为（执行）	after
                merge_extra_vars	合并额外参数	mergeExtraVars
                complete_match	    是否完整匹配路由	completeMatch
                model	            绑定模型	model
                cache	            请求缓存	cache
                param_depr	        路由参数分隔符	depr
                ajax	            Ajax检测	ajax
                pjax	            Pjax检测	pjax
                response	        绑定response_send行为	response
                validate	        绑定验证器类进行数据验证	validate
                header	            设置Response的header信息	header
                append	            追加额外的参数（5.1.5+）	append
                middleware	        注册路由中间件（5.1.6+）	middleware
                merge_rule_regex	合并路由规则（V5.1.6+）	mergeRuleRegex
                filter	            请求变量过滤（V5.1.16+）	filter

            6、/*资源路由*/
                1、后台功能
                    add页面、展示页面、删除功能、修改页面、修改功能、新增功能
                    //声明路由
                        Route::resource('blog','Index/Blog');

                2、自动注册七个路由规则
                    get     blog            idnex   #后台展示
                    get     blog/create     create  #添加页面
                    post    blog            save    #增加操作
                    get     blog/:id        read
                    get     blog/:id/edit   edit    #修改页面操作
                    put     blog/:id        updata  #更新操作
                    delete  blog/:id        delete  #删除操作

            7、/*快捷路由*/
                    1、声明快捷路由
                        Route::controller('blog','Index/Blog');

                    2、运用url
                        url:xxx/blog/xxx 会自动查找blog下面getxxx的方法
                        例：查找a
                            public function geta(){
                                echo 'aaa';
                             }

            8、/*url生成地址*/
                1、use 引入
                    use think\Url;
                2、方法
                    #系统类
                     dump(url::build('index/index/index'));
                     #系统方法
                     dump(url('index/index/index'));

                     #url带参数
                      dump(url::build('index/index/index/id/10'));
                    //或
                     dump(url('index/index/index','['id'=>10,'name'=>'ZhangSan']'));

                    #带域名和锚点
                        1、dump(url('index/index/index#naem','['id'=>10,'name'=>'ZhangSan']'));
                        2、dump(url('index/index/index@blog','['id'=>10,'name'=>'ZhangSan']'));

/*控制器*/
    1、/*新建控制器*/
        控制器 application\index\controller\
        1、新建的控制器首字母大写
        2、控制器必须声明命名空间
            //例：namespace app\idnex\controller;
        3、控制器中类名和文件名一致
        4、如果控制器是驼峰命名法,在url里输入要转换成_
            例：IndexName ==index_name

    2、/*控制器加载页面*
        1、系统view类
            $view = new \think\view;
            return  $view->fetch();

        2、系统Controller类
            引入Controller类
            return $this->display();

        3、系统方法
            return view();

    3、/*数据输出*/
        1、输出数组
            return json_encode($arr);
            //转换成json格式返回

        2、return默认返回是html格式看样子config里改
            return "<h3>233</h3>"

        3、ajax请求的数据返回设置(在config)
            // 默认AJAX 数据返回格式,可选json xml ...
            'default_ajax_return'  => 'json',

    4、/*控制器的初始化 */
        //只要调动任意控制器的任意方法,都会优先执行初始化方法
        1、需要引入Controller 并且类需要继承Controller
            例:public function _initialize(){
                    echo '我是一个初始化的方法';
                }
        
        3、控制器的初始化方法的使用
            1、可以用来提取公共的代码
            2、后台权限的把控

    5、/*前置操作*/
        //把一些公共设置提取出方法调用
        //需要引入并且继承Controller
        例:
            protected $beforeActionList =[
                'two'=>['except'=>'index'],
                //除了index都可以调用
                'one'=>['only'=>'index'],
                //只让index调用的同时,调用one
            ];

    6、/*页面跳转*/
        //需要引入并且继承Controller
        格式：$this->success(提示信息,跳转地址,用户自定义数据,跳转页面,header信息)

        1、跳转成功
            $this->success()
        2、跳转失败
            $this->error()

        3、修改登录成功/失败模板页面
            //默认跳转页面对应的模板路径(php\thinkphp5.0\thinkphp\tpl\dispatch_jump)
                ·成功
                    dispatch_success_tmpl
                ·失败
                    dispatch_error_tmpl
            
            //返回的数据
                $code => 返回状态码 1成功 0失败
                $data => 要返回的数据
                $msg  => 页面提示信息
                $wait => 跳转等待时间 单位秒
                $url  => 跳转页面地址 默认返回上一个页面

            1、在原模板里修改
                地址(thinkphp\tpl\dispatch_jump.tpl)里进行修改
            
            2、新建模板
                地址(thinkphp\tpl\)下新建
                在coofig里修改指向新创建的模板
                    // 默认跳转页面对应的模板文件
                    'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
                    'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
            
    7、/*重定向*/
        作用:重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其它位置

        1、使用
            redirect('跳转地址','其他参数',code,'隐藏参数');

            引入系统变量Controller
            $this-> redirect('index/index',['id'=>'zhangsan'],$code = 302 [默认302],'隐藏参数');

            code
                301 永久转移
                302 临时转移

        使用例:
                public function cdx(){
                    $this->redirect('index/index',['id'=>'zhangsan']);
                }

    8、/*空控制权和空操作*/
        1、空操作
            作用:用于防止用户乱输入导致网页报错
                public function _empty(){
                    $this->redirect('index/index');
                    //检测到不存在的方法重定向回首页
                }
        2、空控制权
            1、在index的controller下新建一个Error.php用与重定向

            2、实例
                class Error extends Controller{
                    //空控制器
                    public function index(){
                        $this->redirect('index/index');
                        //重新定向回首页
                    }

                    //空操作
                    public function _empty(){
                        $this->redirect('index/index');
                    }
                }
            3.注意
                1、网站上线的时候每一个控制器都必须添加空操作

                2、不论前台后台都需要一个空控制权

                3、用来防止恶意输入

    9、/*使用命令行创建*/
        1、切换到网站根目录下

        2、输入php think 查看命令行

        3、使用
            1、创建资源控制器
                php think make:controller app\index\controller\Goods
            
            2、创建数据模型
                php think make:model app\index\model\Goods

            3、清空临时文件
                php think clear

    10、/*资源控制权*/
        1、使用命令行创建资源控制器
            php think make:controller app\index\controller\Goods
        
        2、资源控制器一般配合资源路由使用

/*请求和响应*/
    1、/*如何获取请求*/
        1、系统函数
            $request = request();

        2、系统Request类
            use think\Request;
            //因为Request类属性类的单例,不能new
            $request=Request::instance();
        
        3、系统Controller
            use think\Request;
            use think\Controller;

            public function qinqiu(Request $request){
                dump($request);
            }

    2、/*获取用户的请求信息*/
        //前置例:
                public function qinqiu(Request $request){
                    //内容体
                }

        1、获取用户当前域名
            dump($request->domain());

        2、获取url除了域名以外(携带参数)
            dump($request->url());

        3、获取入口文件
            dump($request->baseFile());

        4、获取PathInfo路径
            dump($request->PathInfo());

        5、获取PathInfo路径不带后缀
            dump($request->Path());

        6、获取url后缀
            dump($request->ext());

        7、伪静态
            就是将静态路径伪装成静态页面,让搜索引擎更好的收录网站和不然其他人知道网站的真实情况

    3、/*获取请求模块\控制权\方法*/
        1、控制器
            dump($request->controller());
           
        2、方法
            dump($request->action());

        3、模块    
             dump($request->module());
             
    4、/*获取请求参数*/
        1、获取请求类型
            dump($request->method());
        2、请求的资源类型
            dump($request->type());
        3、访问的地址
            dump($request->ip());
        4、是否是ajax请求
            dump($request->isAjax());
        5、获取特定字段
            dump($request->only(['name','user']));
        6、剔除字段
            dump($request->except(['name','user']));

    5、/*获取输入变量*/
        1、判断是否存在
            dump($request->has('id','get'));
            dump(input('?get.id'));
        2、读取变量参数
            dump($request->get('id'));
            dump(input('get.id'));
        3、读取全部变量
            dump($request->get());
            dump(input('get.'));

    6、/*过滤数据*/
        1、过滤传入的值,转换实体(防止SQL注入)
            $request->filter('htmlspecialchars');
            dump( $request->post());

        2、过滤传入的值,单双引号(防止错误)
            $request->filter('strip_tags');
            dump( $request->post());

        3、转换<和单双引号
            $request->filter(['htmlspecialchars','strip_tags']);
            dump( $request->post());
        
        4、指定值进行过滤
            dump($request->post('text','','htmlspecialchars'));

        5、对输入内容进行MD5加密
            dump($request->post('text','','htmlspecialchars,md5'));
        
    7、/*获取和排除*/
        1、获取输出指定内容
            dump($request->only('Title',['GET']));
            dump($request->only(['Title','name'],['GET']));   
        
        2、排除掉指定内容
            dump($request->except('Title',['GET']));
            dump($request->except(['Title','name'],['GET']));

    8、/*变量的修饰符*/
        //结构 Request->instance()->变量类型('变量名/修饰符')
            例如:
                input('get.id/d');
                input('post.name/s');
                input('post.ids/a');
                Request->instance()->get('id/d')    

        ====================================
        |  修饰符      作用               
        |    s          强制转换成字符串类型      
        |    d          强制转换成整形       
        |    b          强制转换成布尔型      
        |    a          强制转换成数组型      
        |    f          强制转换成浮点       
        ====================================

    9、/*更改变量*/
         dump($request->get('id'=>20));

    10、/*判断请求类型*/
        //结构:$request->请求类型();或request::isGet();

            获取当前请求类型	    method
            判断是否GET请求	        isGet
            判断是否POST请求	    isPost
            判断是否PUT请求	        isPut
            判断是否DELETE请求	    isDelete
            判断是否AJAX请求	    isAjax
            判断是否PJAX请求	    isPjax
            判断是否为JSON请求	    isJson（V5.1.38+）
            判断是否手机访问	    isMobile
            判断是否HEAD请求	    isHead
            判断是否PATCH请求	    isPatch
            判断是否OPTIONS请求	    isOptions
            判断是否为CLI执行	    isCli
            判断是否为CGI模式	    isCgi
    
    11、/*模拟请求*/
        1、模拟put请求必须要表单,得是post
            ·需要设置隐藏传递模拟请求类型
        
        2、模拟Ajax和PJAX请求
            ·模拟ajax请求
                url结尾加上？_ajax=10
            ·模拟pjax请求
                url结尾加上？_ajax=10

    12、/*伪静态*/
        1、作用
            1)URL伪静态通常是为了满足更好的SEO效果
            2)为了网站的安全

        2、修改伪静态的后缀名
            :地址(php\thinkphp5.0\application\config.php)
            'url_html_suffix'      => 'html',

    13、/*参数绑定*/
        1、使用
            public function bangdin($id='null',$name='null'){
                dump($id);
                dump($name);
            }
        2、注意
            1)方法绑定参数一定要大于URL里声明的
            2)绑定的名字和URL里的必须一致
            3)绑定的参数可以设置默认值
            
/*数据库*/

    1、/*数据库连接*/
        1、/*配置文件*/
                a、配置文件目录(php\thinkphp5.0\application\database.php)

                b、如何配置
                     return [
                        // 数据库类型
                        'type'            => 'mysql',
                        // 服务器地址
                        'hostname'        => '127.0.0.1',
                        // 数据库名
                        'database'        => 'my_data',
                        // 用户名
                        'username'        => 'root',
                        // 密码
                        'password'        => 'root',
                        // 端口
                        'hostport'        => '3306',   
                     ];

        2、/*方法配置*/
            1、数组方式配置
                //前置引入系统Db类
                $Db = Db::connect([
                      // 数据库类型
                         'type'        => 'mysql',
                         // 数据库连接DSN配置
                         'dsn'         => '',
                         // 服务器地址
                         'hostname'    => '127.0.0.1',
                         // 数据库名
                         'database'    => 'my_date',
                         // 数据库用户名
                         'username'    => 'root',
                         // 数据库密码
                         'password'    => 'root',
                         // 数据库连接端口
                         'hostport'    => '',
                         // 数据库连接参数
                         'params'      => [],
                         // 数据库编码默认采用utf8
                         'charset'     => 'utf8',
                         // 数据库表前缀
                         'prefix'      => 'think_',
                    ]);
                    //$Db->table是指引用里面方法
                    $data = $Db->table('my_message')->select();
                    dump($data);

            2、字符串方式配置
                格式:数据库类型://用户名:密码@数据库地址:数据库端口/数据库名#字符集
                例:
                     $Db = Db::connect("mysql://root:root@127.0.0.1:3306/my_date#utf8");
            
        3、/*模型类定义*/

            1、用命令行创建数据模型
                ·cmd移动到tp根目录
                ·PHP think 查看所有命令
                ·执行命令行创建模型:php think make:mode app\index\model\User

            2、手动创建数据模型
                ·地址(php\thinkphp5.0\application\index\model);

            3、配置连接信息
                //前置引入系统Model类 并且继承
                    class User extends Model
                    {
                        protectd $connection=[
                                // 数据库类型
                               'type'        => 'mysql',
                               // 数据库连接DSN配置
                               'dsn'         => '',
                               // 服务器地址
                               'hostname'    => '127.0.0.1',
                               // 数据库名
                               'database'    => 'my_date',
                               // 数据库用户名
                               'username'    => 'root',
                               // 数据库密码
                               'password'    => 'root',
                               // 数据库连接端口
                               'hostport'    => '',
                               // 数据库连接参数
                               'params'      => [],
                               // 数据库编码默认采用utf8
                               'charset'     => 'utf8',
                               // 数据库表前缀
                               'prefix'      => '',
                        ]
                    }
                //字符串方法
                protected $connection="mysql://root:root@127.0.0.1:3306/my_date#utf8";
      
            4、使用自定义模型
                public function data2(){
                    $user = new \app\index\model\User();
                    //查询所有数据
                    $Db = $user::all();
                    dump($Db);
                }

    2、/*数据库基本使用*/
        1、使用think类
            //前置:use 引入Db并且实例化
                    use think\Db;
                    $Db = new Db;

            【查询数据】    $Db::table('my_message')->select();

        2、使用sql语句实现查询
            //前置:与上面一致

            【查询数据】    $data = $Db::query('select * from `user`');
            
    3、/*数据库的增删改查*/

            /*增加数据*/
                public function insert(){
                    //执行插入
                        // $data = Db::execute("insert into `user` value(null,'Excalibur','1314520',CURRENT_TIMESTAMP)");
                    //占位符插入
                        // $data = Db::execute("insert into `user` value(null,?,?,CURRENT_TIMESTAMP)",['大古','123']);
                    //下标占位
                        $data = Db::execute("insert into `user` value(null,:name,:password,CURRENT_TIMESTAMP)",['name'=>'8848','password'=>'123']);
                    //成功返回影响行数
                        echo $data;
                }

            /*删除数据*/
                public function delete(){
                    //执行删除
                        // $data = Db::execute("delete from `user` where id = 6");
                    //占位符删除
                        // $data = Db::execute("delete from `user` where id <?",[6]);
                    //下标占位
                        // $data = Db::execute("delete from `user` where id >:id",['id'=>3]);
                    //返回影响的行数
                        // echo $data;
                }

            /*修改数据*/
                public function update(){
                    //执行修改
                        // $data = Db::execute("update `user` set my_pass='987654' where id = 1");
                    //占位符删除
                        // $data = Db::execute("update `user` set my_pass='987654' where id = ?",[1]);
                    //下标占位
                        $data = Db::execute("update `user` set my_pass='987654' where id = :id",['id'=>1]);
                    //返回影响的行数
                        echo $data;
                }

            /*查询数据*/
                public function select(){
                    //系统类(主要使用)
                        $data1 = Db::query('select * from `user`');
                        // dump($data1);

                    //传入数据(占位符)
                        $data2 = Db::query('select * from `user` where id>=? and id<=?',[0,5]);
                        dump($data2);

                    //获取最后执行的sql语句
                        echo Db::getLastsql();


                }

            /*获取最后执行的sql语句*/
                echo Db::getLastsql();

    4、/*创建资源模块(用户模块)*/
        1、在tp根目录用命令或手动创建一个资源路由
            例：
                php think make:controller app\index\controller/User1
        
        2、写资源路由
            [详情看index下的user1控制器路由声明user]
            
    5、/*tp数据库处理*/

        1、/*单表查询操作*/
            1、table方法查询
                ·查询所有数据
                    $data = Db::table("user")->select();
                
                ·查询一条数据
                    $data = Db::table("user")->find()

            2、name方法查询
                ·用name作为查询会自动添加配置文件的表前缀
                ·用name查询所有数据
                    $data = Db::name("user")->select();
                ·用neme查询单条数据
                    $data = Db::name("user")->find();

            3、助手函数查询db()
                //查找所有数据·
                    $data = db("user")->select();
                //查询单条
                    $data = db("user")->find();
            
            4、where条件匹配查询
                //等比查询
                    $data = Db::table("user")->where('id','1')->select();
                
                //比较查询
                    $data = Db::table("user")->where('id','<=','3')->select();
                
                //比较限制查询
                    $data = Db::table("user")->where('id','<=',5)->where('id','>=','2')->select();
                
                //模糊查询
                    $data = Db::table("user")->where('my_name','like','%e%')->select();
                
                //字符串查询
                    $data = Db::table("user")->where("id >= 3 and id <= 5 ")->select();
                
                //数组查询
                    $data = Db::table("user")->where(["id"=>['<=',3],'my_name'=>['like','%e%']])->select();
                
                //数组单字段多重查询
                    $data = Db::table("user")->where(["id"=>['>=',3]])->where(["id"=>['<=',5]])->select();
                
            5、whereOr或者匹配
                //或者匹配
                    $data = Db::table("user")->where("id",'<=','5')->whereOr('id','>=','5')->select();
                //或者模糊匹配
                    $data = Db::table("user")->where("my_name",'like','%e%')->whereOr("my_name",'like','%M%')->select();
            
            6、limit 截取数据
                //截取指定条数
                    $data = Db::table("user")->limit(5)->select();
                
                //截取5条数数据从第5条后面开始(6开始)
                    $data = Db::table("user")->limit(5,5)->select();

            7、Order 排序
                //升排序
                    $data = Db::table("user")->order('id')->select();
                
                //降排序
                    // $data = Db::table("user")->order('id','desc')->select();

            8、field查询指定字段
                //查找指定字段
                    $data = Db::table("user")->field("my_name,my_pass")->select(); 
                    $data = Db::table("user")->field(["my_name","my_pass"])->select(); 
                
                //声明别名
                    $data = Db::table("user")->field("my_name name,my_pass pass")->select(); 
                    $data = Db::table("user")->field(["my_name"=>'name',"my_pass"=>'pass'])->select(); 
                
                //sql系统函数(计算数据库有多少条数据)
                    $data = Db::table("user")->field("count(*) as tot")->select();
                    $data = Db::table("user")->field(["count(*)"=>"tot"])->select();

                //排除字段
                    $data = Db::table("user")->field("my_name,my_pass",true)->select(); 
                    $data = Db::table("user")->field(["my_name","my_pass"],true)->select(); 

            9、page 页码计算方法(实现分页)
                //1参：是页数自动计算数据段
                //2参：是显示数据的行数
                    $data = Db::table("user")->page('1,5')->select();

            10、group分组聚合
                //统计相同的数量
                    $data = Db::table("user")->field("my_pass,count(*) as tot")->group("my_pass")->select();
                        //选择表 选择显示数据 选择聚合字段 输出
            
            11、having对分组聚合的数据进行过滤(只能结合group分组使用)
                $data = Db::table("user")->field("my_pass,count(*) as tot")->group("my_pass")->having('tot >= 1')->select();

        2/*多表查询*/

            例:$data = Db::query("select goods.*,type.name as type_name from type,goods where type.id = goods.cid");
            
            1、系统方法join
                //内连实现数据库连接(默认)
                    $data = Db::table("goods")->field("goods.*,type.name as type_name")->join("type","type.id=goods.cid")->select();
                
                //右连接
                    $data = Db::table("goods")->field("goods.*,type.name as type_name ")->join("type","type.id = goods.cid","right")->select();
                
                //左连接
                    $data = Db::table("goods")->field("goods.*,type.name as type_name ")->join("type","type.id = goods.cid","left")->select();
            
            2、别名
                // $data = Db::table("goods")->alias('g')->field("g.*,t.name as type_name")->join("type t","t.id=g.cid")->select();
            
            3、union集合
                    $data = Db::field("my_name")->table("user")->union("select name from `goods`")->select();
            
            4、bind绑定参数
                //尽量不要用原生sql,容易给sql注入,尽量使用系统函数
                    // $id = input("id");
                    // $data = Db::table("goods")->where("id",":id")->bind(["id"=>[$id,\PDO::PARAM_INT]])->delete();
            
            5、统计数据
                //最大值
                    $data = Db::table("goods")->max('price');
                //最小值
                    $data = Db::table("goods")->min('price');
                //平均值
                    $data = Db::table("goods")->avg('price');
                //和
                    $data = Db::table("goods")->sum('price');
                //统计有多少条数据
                    $data = Db::table("goods")->sum('id');

            6、增加数据
                //数组中的字段名一定要与数据库的字段名一致(默认返回影响行数)
                    1、单条数组插入
                            $data =[
                                'my_name'=>'张三',
                                'my_pass'=>'123',
                                'age'=>18,
                            ];
                        //执行插入
                            /$code = Db::table('user')->insert($data);

                        //db助手插入(都一样)
                            $code =  db('user')->insert($data);

                    2、多条数组插入
                            $data =[
                                [
                                    'my_name'=>'李三',
                                    'my_pass'=>'123',
                                    'age'=>19,
                                ],
                                [
                                    'my_name'=>'王五',
                                    'my_pass'=>'124',
                                    'age'=>24,
                                ]
                            ];
                        //插入多条数据
                            $code = Db::table('user')->insertAll($data);

                    3、获取最后插入的id
                            $data =[
                                'my_name'=>'贼六',
                                'my_pass'=>'123',
                                'age'=>18,
                            ];
                            $code = Db::table('user')->insertGetId($data);
                                //返回最后插入的id

            7、更新数据update
                例：$code = Db::table("user")->where('id < 10')->update(['age'=>1]);
            
                例：修改一个值setField
                    $code = Db::table("user")->where('id', 11)->setField(['my_pass'=>'abc']);

                1、实现自增加setInc
                    //1参字段名 || 2参 增或减的数量
                    $code = DB::table("user")->where('id',1)->setInc("age",2);

                2、实现自减setDec
                    $code = DB::table("user")->where('id',13)->setDec("age",1);

                3、助手函数(都一样)
                    $code = db('user')->where('id',1)->setInc("age",2);

                4、删除数据
                    //删除一条
                        $code = Db::table("user")->where("id","14")->delete();
                    //删除多条
                        $code = Db::table('user')->where("id in(10,11,12,13)")->delete();
                        $code = Db::table('user')->delete([15,16,17,18]);

                    //删除区间数据
                        $code = Db::table('user')->where("id >= 19 and id <= 21")->delete();

        3/*事务*/
            //事务
                //前置引擎要基于lnnoDB
                public function shiwu()
                {
                    1|自动事务
                        Db::transaction(function(){
                            //删除一条数据
                                Db::table("user")->delete(23);
                            //删除一条错误的数据触发回滚
                                Db::table("user")->delete();
                        });

                    2、手动事务 
                            a、开启事务
                                  Db::startTrans();
                             b、执行事务
                                  try{
                                      //删除正确
                                      $a = Db::table("user")->delete(24);
                                      //判断是否删除成功
                                      if(!$a){
                                          //抛出异常 
                                          throw new \Exception('删除第一条数据出错');
                                      
                                      //删除错误
                                      $b = Db::table("user")->delete();
                                      //判断是否删除成功
                                      if(!$b){
                                          //抛出异常
                                          throw new \Exception('删除第二条数据出错');
                                      
                                      //执行提交操作
                                      Db::commit();
                                      echo "删除成功";
                                  }catch(\Exception $e){
                                      //回滚事务
                                      Db::rollback();
                                      //打印错误信息
                                      dump($e->getMessage());
                                  }

                    3、简单手动控制
                        a、开启事务
                            Db::startTrans();

                            //删除数据1
                                $a = Db::table('user')->delete(24);
                            //删除数据2
                                $b = Db::table('user')->delete(55);

                        b、判断是否执行成功
                            if($a && $b){
                                //提交数据
                                Db::commit();
                            }else{
                                //回滚
                                Db::rollback();
                            }

                }

        4/*视图查询*/    
             1、视图查询
                public function views(){
                    Db::view("goods","id,name,price")
		        		->view("type",'name tname',"type.id=goods.cid")
		        		->select();
                    echo Db::getastSql();
                    dump($data);
                }

/*模型*/
    1、新建数据模型
        a、手动创建
            去model文件夹下创建
            引入model类

        b、命令创建
            ·cnm去根目录
            ·php think make:model app\index\model\admin

        c、注意(一个表一个模型)
            1、数据模型的名字,建议与数据库的数据库表名一致

            2、如果数据模型名字和数据库表名字不一致 可以设置表名
                protected $table="user";
            
            3、如果数据库表名是a_b的模型名应该设置为aB;

            4、首字母一定要大写

    2、连接数据库
        ·1【默认】
            连接与模板名相同的数据库

        ·2【手动设置】
            protected $connection=[]

        ·3)注意(一个表一个模型)
            1、数据模型的名字,建议与数据库的数据库表名一致

            2、如果数据模型名字和数据库表名字不一致 可以设置表名
                protected $table="user";

    3、控制实例化模型
          1·实例化调用
                //前置：$user = new \app\index\model\Admin;
                dump($user::get(1)->toArray());
            
            2·静态方法调用
                //前置:use \app\index\model\Admin as user
                dump(user::get(1)->toArray());
            
            3·loader方法调用
                //前置:use think\Loader;
                $users = Loader::model("type");
                $res = $users::get(1);
                dump($res->toArray());

            4·助手函数
                $uesr = model("user");
                $res = $user::get(1);
                dump($res->toArray());

    4、查询修改数据
        
        1、/*查询单条数据get*/
            //get方法
                // $res = User::get(1);//找主键
                // $res = User::get(["age"=>"20"]);//找指定的数据

            //闭包方法
                // $res = User::get(function($query){
                //     $query->where("age",20);
                // });

            //fing方法
                // $res = User::where("age",25)->find();
            
            //打印单条数据
                // dump($res->toArray());
               
        2、/*查询多条数据*/

            /*查询全部数据all*/
                $res = User::all();
            
                1、查询主键(id)
                $res = User::all("1,3");

                2、数组查询
                $res = User::all(['2','3']);

                3、数组指定条件
                $res = User::all(["age"=>25]);

                4、闭包
                $res = User::all(function($query){
                    $query->where("password",123)
                        ->whereOr("name",'Ex_maid')
                        ->order('id',"desc");
                        //对数据进行排序
                });
                        
                //打印多条数据
                    foreach ($res as $key => $value) {
                        dump($value->toArray());
                    }

            /*查询所有数据select*/ 和all方法基本类似
                $res = User::select();

                //截取数据
                $res = User::limit(2)->select();

                //打印多条数据
                foreach ($res as $key => $value) {
                    dump($value->toArray());
                }

        3、/*查询并且获取对应字段的值*/

            1、获取单个字段(只能一个)
                $res = user::where("id",5)->value('name');
                //匹配的数据-----value('要输出的字段');

            2、获取一列值(可以多带一个列,第二列的参数会变成数组下标)
                $res = user::column("name","id");

            3、通过Query查询
                User::where('id','>',10)->select();
                User::where('name','thinkphp')->find();
                
            //打印数据
                dump($res);

        4、/*增加数据*/

            1、增加单条数据
                1、实例化增加数据
                    //先实例化模型
                        $user = new User;
                    //设置值
                         $user->name = "李四";
                         $user->Password = "fwkt";
                         $user->age = "18";
                    //提交数据
                         dump($user->save());

                //通过data方法增加
                    $user->data([
                        'name'=>'小明',
                        'Password'=>'1234560',
                        'age'=>14,
                     ]);
                    提交数据
                        dump($user->save());

                //实例化方法
                    $user = new User([
                        'name'=>'林北2',
                        'Password'=>'1234560',
                        'age'=>28,
                        'sex'=>'1',
                    ]);
                    //提交数据 
                    dump($user->allowField(true)->save());
                        //allowField(true):屏蔽数据库中不存在的字段
                        //allowField(['name','age']):可以限制写入的字段

                //获取自增的id
                    echo $user->id;

            2、增加多条数据
                 $user = new User;
        
                $list=[
                    ['name'=>'李老师','Password'=>'245','age'=>'54'],
                    ['name'=>'切嗣','Password'=>'1245','age'=>'44']
                ];
                $user->saveAll($list);

        5、/*修改数据*/
            1、删除
                1、获取数据再删除  
                    $user =User::get(['id'=>11]);
                    dump($user->delete());
    
                2、唯一主键删除destroy(可以删除多条数据,例:"1,2,3")
                    $user= User::destroy(12);
                    dump($user);
    
                3、删除指定条件
                    $user=User::destroy(['name'=>'切嗣']);
                
                4、删除多个条件
                    $user=User::destroy(['Password'=>'fwkt','age'=>'18']);
    
                5、闭包删除
                    $user = User::destroy(function($query){
                        $query->where('name','like','%林北%');
                    });
                    
                //打印影响行数
                    echo $user;

            2、修改
                1、字段修改
                    $user =User::get(18);
                    $user->age=18;
                    $user->save();

                2、数组修改
                    $user = new User;
                    $res = $user->save([
                        'Password'=>'1314520',
                        'age'=>26,
                    ],['id'=>17]);

                4、修改数据(表单传值)
                    a·模拟表单传值
                        $_POST['name']='伞兵';
                        $_POST['Password']='sbyhlby';
                        $_POST['age']='26';
                        $_POST['sex']='nan';
                        $_POST['id']=5;

                    b·实例化
                        $user =new User;
                    c·过滤输入的字段,并且修改
                        $user->allowField(['name','Password','age'])
                        ->save($_POST,['id' => $_POST['id']]);

                5、批量更新数据
                    a·声明数据
                        $data= [
                            ['id'=>'13','name'=>'二哈',"Password"=>'1314520','age'=>'8'],
                            ['id'=>'15','name'=>'咖啡猫',"Password"=>'1314520','age'=>'12'],
                        ];
                    b·实例化
                        $user = new User;
                    c·更改数据
                        $user->saveAll($data);

                6、静态
                7、闭包
                    [自己文档找]

        6、/*聚合*/
            作用:统计数据条数
            1、查询全部数据
                $tot=User::count();
                dump($tot);

            2、统计条件判断
                $tot = User::where('id > 3')->count();
                dump($tot);

            3、统计最大值(最小/平均/求和 都一样)
                $max = User::max('age');
                dump($max);

        7、/*获取器*/

            1、数据模型
                【注意】Sex的获取器(get数据库字段名Attr)

                1、方法
                    public function getsexAttr($val){
                    switch ($val) {
                        case '0':
                            return '未定义';
                            break;
            
                        case '1':
                            return '男';
                            break;
            
                        case '2':
                            return '女';
                            break;
                        
                        default:
                            # code...
                            break;
                    }
                    }

                2、方法
                    public function getUserStatusAttr($val){

                        $stats = [0=>'未激活',1=>'正常',2=>'限制用户'];

                        return $stats[$val];
                    }  

            2、控制器  
                //获取数据
                    $user = User::get(['id',15]);
                //经过模型获取器判断输出
                    dump($user->toArray());
                //不经过模型数据
                    dump($user->getData());

        8、/*修改器*/
            //数据手动赋值的时候自动进行转换处理
            1、模型
                //名字要与数据库的一致
                public function setPasswordAttr($val){
                    //加密
                    return md5($val);
                }

            2、控制器
                //注意:只能被save触发，update无法触发
                public function setPassword(){
                    //修改密码经过模型加密
                    $user = new User;
                    $res =$user->save(['Password'=>'1234'],['id'=>1]);
                    dump($res);
                }

            3、批量修改

        9、/*自动完成*/
            //没有手动赋值的情况下进行手动处理
            //无论更新还是修改都会执行

            1、模型
                1、自动修改(很少用)
                    //设置自动更新
                        protected $auto = ['time','User_status'];

                    //书写自动完成
                        protected function setTimeAttr(){
                            return time();
                        }
                        protected function setUserStatusAttr(){
                            return 1;
                        }
                2、插入执行
                    protected $insert=['create_time'];

                3、更新执行
                    protected $update=['update_time'];

            2、控制器
                1、添加
                    public function setAdd(){
                        $user = new User;
                        $res  = $user->save(['name'=>'宗','Password'=>'123','age'=>23,'sex'=>1]);
                        dump($res);
                    }

                2、修改
                    public function setSave(){
                        $user = new User;
                        $res  = $user->save(['name'=>'宗','Password'=>'123','age'=>23,'sex'=>1],['id'=>8]);
                        dump($res);
                    }

        10、/*时间戳*/

            1、可以在用户配置里设置自动插入时间戳('更新',’添加‘)
                地址:php\thinkphp5.0\application\database.php
                // 自动写入时间戳字段
                'auto_timestamp'  => false,

            2、可以在模型里设置自动插入
                1、自动写入时间戳
                    protected $autoWriteTimestamp = true;

                2、如果数据库字段与预设不一样可以设置
                    protected $createTime = '写入时间字段';
                    protected $updateTime = '更新时间字段'
                
                3、取消更新时间戳
                    protected $createTime = false;

        11、/*软删除*/
            //数据被加上限制无法访问达到伪删除

            1、在模型里引入softDelete类
                例:use traits\model\SoftDelete;
            
            2、model类里引入softDelete类
                例:use SoftDelete;

            3、需要在数据库里设置一个字段
                例：delete_time

            4、如果字段名与预设不一致可以重写
                例: protected $deleteTime = 'delete_times';

            5、绕过软删除直接删掉
                1、加true
                    $res = User::destroy(19,true);

            6、打印被软删的数据
                //读取全部数据(包括软删)
                    // $res = User::withTrashed()->find(20);
                    // $res = User::withTrashed()->select();

                //读取全部被软删除的数据
                    // $res = User::onlyTrashed()->select();
                    // $res = User::onlyTrashed()->fing();

/*视图*/
    //传参('参数1',[参数2],[参数3],[参数4]);

        1)参数:渲染文件名

        2)参数:传入赋值参数

        3)参数:模板替换

        4)参数:

    1、加载页面

        (1、controller类的fetch输出(需要继承Controller)
            return $this->fetch('',['name'=>'thinkphp']);
        
        (2、助手函数调用
            return view();
        
        (3、实例化view加载视图(不推荐)
            $view = new View;
            return $view->fetch();

    2、视图赋值
        1、assign给视图传参(可以是变量)
            //单个
                $this->assign('name','xcw');
            //批量
                $this->assign([
                    'age' => 18,
                    'sex' => '男'
                ]);
            //模板数据
                return $this->fetch();

        2、view和fetch赋值
        
            //view和fetch传参
                return view('',['name'=>'罗霄','age'=>18,'sex'=>'女']);
            
                return $this->fetch('',['name'=>'罗霄2','age'=>18,'sex'=>'女2']);

        3、对象赋值
            //赋值    
                $this->view->name = "最上";
                $this->view->age = '40';
                $this->view->sex = '女';

            //渲染输出
                return view();

    3、模板替换
        //作用:设定关键字替换指定的内容如 文件件地址

        1、默认文件设置(全局替换)
            a、地址(application\config.php)
                  'view_replace_str'       => [
                    //前台文件
                        '__HOMES__'   =>   '/static/home/public',
                    //后台文件
                        '__ADMINS__'  =>   '/static/admin/public'
                ],

        2、//view和fetch(局部替换)
                return view('',[],[
                    '__HOMES__'=>'局部前台',
                    '__ADMINS__'=>'局部后台']);

    4、模板渲染
        //默认加载 当前控制器 当前方法 的视图
            例:return view();

        //可以加载其他控制器的 其他方法
            例:return view('user/index');

    5、模板 
        1、输出数组\字符串
        
            前置:分配数据assing
                //字符串
                    $this->assign('str','单条数据');

                //数组
                    $data = ([
                        'name'=>'张三',
                        'age'=>'18',
                        'sex'=>'nan'
                    ]);
                    $this->assign('data',$data);

            1、打印字符串
                <h2>{$str}</h2>
            
            2、打印数组
                <h2>{$data.name}</h2>
                <h2>{$data.age}</h2>
                <h2>{$data.sex}</h2>
          
        2、修改模板替换符号和函数替换符
            地址(application\config.php)   

            1、输出
                // 模板引擎普通标签开始标记
                    'tpl_begin'    => '{',
                // 模板引擎普通标签结束标记
                'tpl_end'      => '}', 
            
            2、函数
                // 标签库标签开始标记
                'taglib_begin' => '{',
                // 标签库标签结束标记
                'taglib_end'   => '}',

        3、变量输出

            1)使用PHP函数输出
                <!-- 输出md5加密密码 -->
                    <h2>{$pass|md5}</h2>
                <!-- 输出转换格式的时间 -->
                    <h3>{$time|date = "Y-m-d H:i:s",###}</h3>
            
            2)函数的嵌套
                <!-- 加密|大写|截取0-5 -->
                 <h3>{$pass|md5|strtoupper|substr=0,5}</h3>

            3)单独使用函数
                <h3>{:md5($pass)}</h3>
                <h3>{:date('y-m-d H:i:s')}</h3>

            4)默认值defaul
                //作用:无指定数据时可以填入默认值静默错误
                <h3>默认值:{$names|default = '默认'}</h3>

            5)三元运算符
                //判断变量是否存在或者不等于0
                <h3>{$status == 1?'yes':'no'}</h3>、
                
            6)计算
                <h3>{$a+$b}</h3>

            7)原样输出
                //被包裹的字段不会被解析
                {literal} 内容 {/literal}

            8)输出系统变量(不用assign赋值)
                <h3>{$_get['id']}</h3>
                或
                <h3>{$Think.get.id}</h3>
                //获取host地址
                <h3>{$_SERVER['http_host']}</h3>

            9)输出常量
                //获取当前目录地址的常量
                <h3>{$Think.app_path}</h3>

            10)配置输出
                <h3>{$Think.config.default_module}}</h3>

            11)语音包输出
                <h3>{$Think.lang.page_error}</h3>

        4、模板注释
            //作用:不经过框架处理减缓服务器压力
            1、单行注释
                {/*注释内容*/}或者{//注释内容}

            2、多行注释
                {/*
                    多行注释内容
                */}

        5、模板包含
            //作用:在模板里引入其他模板例如页头页尾
            {include file = "在view文件下的地址"}

        6、模板布局
            //注意每个文件只能引入一个布局
            1、在view创建一个文件用于存放公共文件
                例:layout.html

            2、在layout.html页面里非公共区域替换成{__CONTENT__}
                //解释:公共区域保留,非公共区域替换
                例:{__CONTENT__}

            3、在控制器视图里添加{layout name="公共文件地址" /}
                 //解释:载入公共区域
                {layout name="layout" /}

        7、模板继承
            //解释:继承css样式
            1、建立公共模板
                1)在view根目录建立公共模板

                2)在要写入公共模板的地方写入标签
                    例:{block name = '模块名字'} {/block}

                3)在要继承的公共模板的页面载入模板
                    例:{extend name= "公共模板名字" /}

                4)在继承模板插入html代码
                    例: {block name="main"}
                            <<——html代码——>>
                        {/block}

                5)公共文件注入
                    1、在view创建public公共文件存储静态模块

                    2、引入公共静态文件
                        {include file = "public目录下的模块地址"}

        8、内置标签

            1、内置循环
                1)volist循环
                    1、全部遍历
                        //使用例:
                            {volist name="传入值" id='value'}
                                <h3>{$value.?}</h3>
                            {?volist}
                    
                    2、限制遍历
                        //从第5个开始,遍历5条数据
                        offset="2" length="5"

                    3、奇偶条数设置(key除以指定数的结果分配分支)
                        //算法公式:mod除以key=得数
                        {volist name="传入值" id='val' mod='除数'}
                            {eq name='mod' value='得数0'}
                                <h3>{$value.?}</h3>
                            {/eq}
                            {eq name='mod' value='得数1'}
                                <h3>{$value.?}</h3>
                            {/eq}
                        {?volist}

                    4、数据为空输出警告empty
                        1、普通警告
                            {volist name="data" id='value' empty="数据为空" } 
                                <<数据体>>
                            {/volist}
                        2、传入警告
                            {volist name="data" id='value' empty="$empty" } 
                            //数据从控制器通过assign传入

                    5、key
                        //解释:从1开始的id值
                        例:{volist name="data" id='value' key='k' } 
                                {$k}//输出
                            {\volist}

                2)foreach循环
                    ·name:      需要遍历的数组
                    ·item       接收遍历的数据
                    ·key        顺序遍历id                    

                    {foreach name="data" item='val'}
                        <li>{$key}) 名字:{$val.name} 年龄:{$val.age}} </li>
                    {/foreach}

                3)for循环

                    ·start          开始值
                    ·end            结束值
                    ·comparison     比较条件
                    ·step           步数
                    ·name           循环变量名(默认$i)

                    //正序
                    {for start='0' end='10' comparison='elt' step='2' name='abc'}
                        <li>{$abc}</li>
                    {/for}

                    //倒序
                    {for start='10' end='0' comparison='gt' step='-1' name='abc'}
                        <li>{$abc}</li>
                    {/for}

            2、比较标签
                例:
                    {eq name='被比较值' value='比较值'}
                        <<满足输出>>
                    {eq}

                eq或者 equal	    等于
                neq 或者notequal    不等于
                gt	                大于
                egt	                大于等于
                lt	                小于
                elt	                小于等于
                heq	                恒等于
                nheq	            不恒等于

            3、条件判断

                1、if标签
                    condition:  比较标签(比较值要用$)

                    例:
                        {if condition="$a==$b"}
                            <p>数值相对</p>
                        {else /}
                            <p>数值不相对</p>
                        {/if}

                2、switch标签
                    name:   比较的值

                    例:
                        {switch naem="k"}
                            {case value='?'}<<内容1>>{/case}
                            {case value='?'}<<内容2>>{/case}
                            {case value='?'}<<内容3>>{/case}
                            {default /}<<都非>>
                        {/switch}

                3、in判断指定数值是否在一个范围内
                    naem:       被比对值
                    value:      比对数组

                    例:
                        {in naem='k' value='1,2,3,4,5,6,7'}
                            <p>合法数值</p>
                        {else /}
                            <p>非法数值</p>
                        {/in}

                4、BETWEEN 和 NOTBETWEEN标签(no就是非)
                    1、BETWEEN
                        name:       被比较数值       
                        value:      比较数值区间(参数1,参数2)

                    例:
                        {between name='k' value='1,2'}
                            <li>范围内</li>
                        {else/}
                            <li>非法数值</li>
                        {/between}

            4、原生PHP
                    {php}
                        <<php代码体>>
                    {/php}

            5、标签嵌套
                {volist name='data' id='val'}
                    {php}
                        $sw=$a % $b;
                    {/php}

                    {switch}
                        {case value='0'}<<内容1>>{/case}
                        {case value='1'}<<内容2>>{/case}
                        {case value='2'}<<内容3>>{/case}
                    {/switch}

                {\volist}

            6、多维数组的遍历 
                1、获取数据并且封装成二维数组
                    public function goods()
                    {
                        $type = Db::table('menu')->select();

                        //把doods表符合判断的数据遍历到$value['goods']
                        foreach ($type as $key => &$value) {
                            $value['goods'] = Db::table('goods')->where("cid = $value[id]")->select();
                        }
                        
                        //渲染视图
                        return $this->fetch('', ['type' => $type]);
                    }
                
                2、在视图遍历数据
                    <ul>
                        {volist name='type' id='val'}

                            //分类
                            <h1>分类:{$val.name}</h1>

                            {volist name='val.goods' id='val'}
                                
                                //分类里的数据
                                <h4>名字:{$val.name} 库存:{$val.quantity} 价格:{$val.Theprice} </h4>
                            {/volist} 

                        {/volist}
                    </ul>

    6、验证器
        1、引入系统验证器
            use think\Validate

        2、实例化验证器类
            $validate = new validate([
                //--判断信息--
                //不能为空--限制6-12位
                "username"=>"require|length:6,12"
                //不能为空--数据是否一致
                "password"=>"require|confirm:orpassword"
            ],
            [
                //--错误信息--
                "username.require"=>"用户数据不存在",
                "username.length"=>"用户名长度不足"
                "password.confirm"=>"两次密码不一致"
            ]
            
            )

        3、接收数据并且进行验证
            //接收数据
                $data = input('poot.');

            //判断数据
                if($validate->check($data)){
                    //写入数据
                    if(Db::table('admin')->insert($arr)){
                        $this->success('添加成功');
                    }else{
                        $this->error('添加错误');
                    }
                }else{
                    //错误信息
                    $validate->getError();
                }

        4、公共验证
            1、在app/模块下(例:index)里创建validate/admin.php进行封装

            2、声明命名空间并且引入validate类
                例:use think\validate

            3、书写验证器规则
                //验证器规则
                    protected $rule=[

                        //不能为空--限制6-12位
                        "username"=>"require|length:6,12"
                        //不能为空--数据是否一致
                        "password"=>"require|confirm:orpassword"
                    ];

                //验证器提示
                    protected $message=[
                        //--错误信息--
                        "username.require"=>"用户数据不存在",
                        "username.length"=>"用户名长度不足"
                        "password.confirm"=>"两次密码不一致"
                    ]

            4、引用验证器
                //实例化公共验证器
                    $validate = new \app\index\validate\admin

                //对数据进行验证
                    if($validate->check($data)){

                    }

    7、缓存
        //作用:用于减缓数据库压力和用户的访问体验

            1参:    数据缓存名
            2参:    被缓存的数据
            3参:    缓存存在的时间
            ==返回值==
            布尔值

        1、缓存配置在config文件下
            //默认缓存保存地址(runtime/cache)

        2、从数据库中获取数据
            $data = Db::table('user')->select();
        
        3、设置缓存
            // dump(Cache::set('UserData',$data,200));
            //如果只有两个参数默认永久(time:秒)

        4、助手函数
            dump(cache('data',$data,200));

        5、读取缓存
            //普通
                dump(Cache::get('UserData'));
            //助手函数
                dump(cache('UserData'));
            
        6删除缓存
                dump(Cache::rm('UserData'));
            //或
                dump(cache('UserData',NULL));

        7、清空缓存
            dump(Cache::clear());

        8、缓存的使用
            if($data=Cache('UserData')){
                //数据存在
            }else{
                //数据不存在
                $data=Db::table('user')->select();
                cache('UserData',$data,20)
            }

    8、Sesson
        1、设置session
            Session::set('name','云之梦')
            //助手函数
            session('age',4);

        2、获取session
            Session::get('name')
            //助手函数
            session('age');

        3、判断session是否设置
            session::has('name');
            //助手
            session('?name')
                #返回布尔值

        4、删除session
            session::dalete('data');
            //助手
            session('data',null);

        5、清空session
            session::clear();
            //助手
            session(null)

    9、Cookie
        1、Cookie参数在config下设置
            //需要引入Cookie类

        2、声明Cookie
             Cookie::set('name','Maid',50);
            //助手
            Cookie('age',25,50);

        3、获取Cookie信息
            echo Cookie::get('name');
            //助手
            echo Cookie('age');

        4、判断Cookie是否设置
            if(Cookie::has('name'))
            //助手
            Cookie('?age');

        5、删除Cookie
            Cookie::dalete('name');
            //助手
            Coonkie('age',null)

        6、清除所有Cookie
            Cookie::claer();
            //助手
            Cookie(null);

    10、分页
        1、使用paginate来限制一页显示几条数据
            例:$data=Db::table('user')->paginate(1参,2参);
            
            1参:每页显示的条数
            2参:写入true 只有上一页和下一页

        2、视图里显示分页按钮render
            例:{分配的数据->render()}

    11、上传文件
        1、单文件上传
             //获取数据
                $file=$request->file('img');

            // 将数据移动到指定文件
                if($info=$file->move('./upload/')){
                    dump($info->getsaveName());
                }else{
                    echo $info->getError();
                }

        2、多文件上传
            //获取数据
            $file=$request->file('img');
        
            foreach ($file as $val) {
               if($info=$val->move('./upload/')){
                    return $info->getsaveName();
               }else{
                    return $info->getError();
               }
            }

    12、验证码
        1、页面设置
            {:captcha_img()}
            <!-- 或 -->
            <img src="{:captcha_src()}" alt="验证码">

        2、验证码验证
             if(captcha_check($code)){
                echo"okokok";
            }else{
                echo "error";
            }

        3、设置验证码
            1、地址在config里设置

                'captcha'=>[
                    'seKey'    => 'ThinkPHP.CN',
                    // 验证码加密密钥
                    'codeSet'  => '2345678abcdefhijkmnpqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY',
                    // 验证码字符集合
                    'expire'   => 1800,
                    // 验证码过期时间（s）
                    'useZh'    => false,
                    // 使用中文验证码
                    'zhSet'    => '们以我到他会作时要动国产的一是工就年阶义发成部民可出能方进在了不和有大这主中人上为来分生对于学下级地个用同行面说种过命度革而多子后自社加小机也经力线本电高量长党得实家定深法表着水理化争现所二起政三好十战无农使性前等反体合斗路图把结第里正新开论之物从当两些还天资事队批点育重其思与间内去因件日利相由压员气业代全组数果期导平各基或月毛然如应形想制心样干都向变关问比展那它最及外没看治提五解系林者米群头意只明四道马认次文通但条较克又公孔领军流入接席位情运器并飞原油放立题质指建区验活众很教决特此常石强极土少已根共直团统式转别造切九你取西持总料连任志观调七么山程百报更见必真保热委手改管处己将修支识病象几先老光专什六型具示复安带每东增则完风回南广劳轮科北打积车计给节做务被整联步类集号列温装即毫知轴研单色坚据速防史拉世设达尔场织历花受求传口断况采精金界品判参层止边清至万确究书术状厂须离再目海交权且儿青才证低越际八试规斯近注办布门铁需走议县兵固除般引齿千胜细影济白格效置推空配刀叶率述今选养德话查差半敌始片施响收华觉备名红续均药标记难存测士身紧液派准斤角降维板许破述技消底床田势端感往神便贺村构照容非搞亚磨族火段算适讲按值美态黄易彪服早班麦削信排台声该击素张密害侯草何树肥继右属市严径螺检左页抗苏显苦英快称坏移约巴材省黑武培著河帝仅针怎植京助升王眼她抓含苗副杂普谈围食射源例致酸旧却充足短划剂宣环落首尺波承粉践府鱼随考刻靠够满夫失包住促枝局菌杆周护岩师举曲春元超负砂封换太模贫减阳扬江析亩木言球朝医校古呢稻宋听唯输滑站另卫字鼓刚写刘微略范供阿块某功套友限项余倒卷创律雨让骨远帮初皮播优占死毒圈伟季训控激找叫云互跟裂粮粒母练塞钢顶策双留误础吸阻故寸盾晚丝女散焊功株亲院冷彻弹错散商视艺灭版烈零室轻血倍缺厘泵察绝富城冲喷壤简否柱李望盘磁雄似困巩益洲脱投送奴侧润盖挥距触星松送获兴独官混纪依未突架宽冬章湿偏纹吃执阀矿寨责熟稳夺硬价努翻奇甲预职评读背协损棉侵灰虽矛厚罗泥辟告卵箱掌氧恩爱停曾溶营终纲孟钱待尽俄缩沙退陈讨奋械载胞幼哪剥迫旋征槽倒握担仍呀鲜吧卡粗介钻逐弱脚怕盐末阴丰雾冠丙街莱贝辐肠付吉渗瑞惊顿挤秒悬姆烂森糖圣凹陶词迟蚕亿矩康遵牧遭幅园腔订香肉弟屋敏恢忘编印蜂急拿扩伤飞露核缘游振操央伍域甚迅辉异序免纸夜乡久隶缸夹念兰映沟乙吗儒杀汽磷艰晶插埃燃欢铁补咱芽永瓦倾阵碳演威附牙芽永瓦斜灌欧献顺猪洋腐请透司危括脉宜笑若尾束壮暴企菜穗楚汉愈绿拖牛份染既秋遍锻玉夏疗尖殖井费州访吹荣铜沿替滚客召旱悟刺脑措贯藏敢令隙炉壳硫煤迎铸粘探临薄旬善福纵择礼愿伏残雷延烟句纯渐耕跑泽慢栽鲁赤繁境潮横掉锥希池败船假亮谓托伙哲怀割摆贡呈劲财仪沉炼麻罪祖息车穿货销齐鼠抽画饲龙库守筑房歌寒喜哥洗蚀废纳腹乎录镜妇恶脂庄擦险赞钟摇典柄辩竹谷卖乱虚桥奥伯赶垂途额壁网截野遗静谋弄挂课镇妄盛耐援扎虑键归符庆聚绕摩忙舞遇索顾胶羊湖钉仁音迹碎伸灯避泛亡答勇频皇柳哈揭甘诺概宪浓岛袭谁洪谢炮浇斑讯懂灵蛋闭孩释乳巨徒私银伊景坦累匀霉杜乐勒隔弯绩招绍胡呼痛峰零柴簧午跳居尚丁秦稍追梁折耗碱殊岗挖氏刃剧堆赫荷胸衡勤膜篇登驻案刊秧缓凸役剪川雪链渔啦脸户洛孢勃盟买杨宗焦赛旗滤硅炭股坐蒸凝竟陷枪黎救冒暗洞犯筒您宋弧爆谬涂味津臂障褐陆啊健尊豆拔莫抵桑坡缝警挑污冰柬嘴啥饭塑寄赵喊垫丹渡耳刨虎笔稀昆浪萨茶滴浅拥穴覆伦娘吨浸袖珠雌妈紫戏塔锤震岁貌洁剖牢锋疑霸闪埔猛诉刷狠忽灾闹乔唐漏闻沈熔氯荒茎男凡抢像浆旁玻亦忠唱蒙予纷捕锁尤乘乌智淡允叛畜俘摸锈扫毕璃宝芯爷鉴秘净蒋钙肩腾枯抛轨堂拌爸循诱祝励肯酒绳穷塘燥泡袋朗喂铝软渠颗惯贸粪综墙趋彼届墨碍启逆卸航衣孙龄岭骗休借',
                    // 中文验证码字符串
                    'useImgBg' => false,
                    // 使用背景图片
                    'fontSize' => 25,
                    // 验证码字体大小(px)
                    'useCurve' => true,
                    // 是否画混淆曲线
                    'useNoise' => true,
                    // 是否添加杂点
                    'imageH'   => 0,
                    // 验证码图片高度
                    'imageW'   => 0,
                    // 验证码图片宽度
                    'length'   => 5,
                    // 验证码位数
                    'fontttf'  => '',
                    // 验证码字体，不设置随机获取
                    'bg'       => [243, 251, 254],
                    // 背景颜色
                    'reset'    => true,
                    // 验证成功后是否重置
                ]

    13、图片处理
        1、获取图片信息Image::open
            //读取图片
                $imges=Image::open('./img/a.jpg');

            //获取图片基本信息
                dump($imges->width());
                dump($imges->height());
                dump($imges->type());
                dump($imges->size());
                dump($imges->mime());

        2、图片裁剪crop
            1、图片裁剪(默认从顶点裁剪)
                $imges->crop(300,300)->save("./img/cj.jpg");

            2、设置裁剪位置(宽，高，裁剪起始宽，起始高)
                dump($src=$imges->crop(300,300,100,100)->save("./img/cj2.jpg"));

        3、图片缩放
            1、默认等比缩放
                $imges->thumb(300,300,参数3)->save('./img/sf.jpg');
            
            2、参数3的定义
                //常量，标识缩略图等比例缩放类型
                const THUMB_SCALING   = 1; 
                //常量，标识缩略图缩放后填充类型
                const THUMB_FILLED    = 2; 
                //常量，标识缩略图居中裁剪类型
                const THUMB_CENTER    = 3; 
                //常量，标识缩略图左上角裁剪类型
                const THUMB_NORTHWEST = 4;
                //常量，标识缩略图右下角裁剪类型
                const THUMB_SOUTHEAST = 5; 
                //常量，标识缩略图固定尺寸缩放类型
                const THUMB_FIXED     = 6; 

        4、图片翻转
            1、上下颠倒flip
                $imges->flip()->save("./img/fz.jpg");
            
            2、图片旋转rotate(默认顺时针旋转90°)
                $imges->rotate(参数1)->save("./img/xz.jpg");
                参数1:旋转角度

        5、水印
            1、图片水印
                $imges->water("参数1",参数2,参数3)->save('./img/sy.jpg');

                参数1:水印地址
                参数2:位置(9宫格)
                参数3:透明度

            2、文字水印
                //文字水印(默认右下角)
                    $imges->text('十年磨一剑 - 为API开发设计的高性能框架',ROOT_PATH.'public/static/BOOKOS.ttf',20,'#ff8800')->save('./img/text_image.png');
                
                参数1:文字
                参数2:字体地址
                参数3:字体大小
                参数4:字体颜色

                其他参数:
                    text	不能为空	添加的文字
                    font	不能为空	字体文件路径
                    size	不能为空	字号，单位是像素
                    color	#00000000	文字颜色
                    locate	WATER_SOUTHEAST	文字写入位置
                    offset	0	文字相对当前位置的偏移量
                    angle	0	文字倾斜角度



/****************************TP5.0概述END*****************************/


/****************************TP5.1概述*****************************/
/*TP5.1环境变量*/
    //官方提供了一个类库Env来获取环境变量 需要引入Env
        例return Env::get('app_path')
    ·应用根目录          root_path
    ·应用目录            app_path
    ·框架目录            think_path
    ·配置目录            config_path
    ·扩展目录            extend_path
    ·composer目录        vendor_path
    ·运行缓存目录        runtime_path
    ·路由目录            route_path
    ·当前模块目录        module_path

/*控制器定义*/
    1、控制器的大小写会被转换,用_替代大小
        例如:HelloWorld转换成Hello_world

    2、return输出数组可以用json输出
        例如:return json($数组变量);

    3、输出模板
        例如：view('路径');

    4、定义初始化方方法:initialize()

        a、initialize()会在调用控制器方法前执行
            例：protected(受保护也可以) function initialize(){
                parent::initialize();
                echo'xxx';
                //初始化输出内容
            }

        b、initialize()方法不需要任何返回值,输出用php方式,return无效

/*控制器操作*/
    1、前置操作 $beforeActionlist
        //有选着性的的进行初始化操作
        a、需要继承 extends Controller

        b、例如：
            protected $beforeActionlist= [
                'first',
                //默认全部执行
                'second'=>['except'=>'one'],
                //one不能运行这个初始化方法 可以用xx,xx选着多个方法
                'only'=>['only'=>'one'],
                //只能用这个运行前置方法
            ]

            protected function first(){
                echo xxxx;
                执行体;
            }

    2、跳转和重定向
        //Controller提供了两个跳转方法
            1、success(msg,url)
                //成功转挑到url
            2、error(msg)
                //失败返回上一层
            例：
            protected $flag = false;
                //设置默认值
            public function index(){
                if($this->flag){
                    $this->success(msg:'成功',url'../');
                }else{
                    $this->error(msg:'失败');
                }
            }
        //跳转的模板
            a、地址(php\ThinkPHP5.1\thinkphp\tpl\dispatch_jump.tpl)

            b、可以在app.php里更改模板

    3、空方法和空控制器
/****************************TP5.1概述END*****************************/
